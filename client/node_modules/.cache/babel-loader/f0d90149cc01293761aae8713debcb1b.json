{"ast":null,"code":"'use strict';\n\nvar brackets = require('expand-brackets');\n\nvar define = require('define-property');\n\nvar utils = require('./utils');\n/**\n * Characters to use in text regex (we want to \"not\" match\n * characters that are matched by other parsers)\n */\n\n\nvar TEXT_REGEX = '([!@*?+]?\\\\(|\\\\)|[*?.+\\\\\\\\]|\\\\[:?(?=.*\\\\])|:?\\\\])+';\nvar not = utils.createRegex(TEXT_REGEX);\n/**\n * Extglob parsers\n */\n\nfunction parsers(extglob) {\n  extglob.state = extglob.state || {};\n  /**\n   * Use `expand-brackets` parsers\n   */\n\n  extglob.use(brackets.parsers);\n  extglob.parser.sets.paren = extglob.parser.sets.paren || [];\n  extglob.parser\n  /**\n   * Extglob open: \"*(\"\n   */\n  .capture('paren.open', function () {\n    var parsed = this.parsed;\n    var pos = this.position();\n    var m = this.match(/^([!@*?+])?\\(/);\n    if (!m) return;\n    var prev = this.prev();\n    var prefix = m[1];\n    var val = m[0];\n    var open = pos({\n      type: 'paren.open',\n      parsed: parsed,\n      val: val\n    });\n    var node = pos({\n      type: 'paren',\n      prefix: prefix,\n      nodes: [open]\n    }); // if nested negation extglobs, just cancel them out to simplify\n\n    if (prefix === '!' && prev.type === 'paren' && prev.prefix === '!') {\n      prev.prefix = '@';\n      node.prefix = '@';\n    }\n\n    define(node, 'rest', this.input);\n    define(node, 'parsed', parsed);\n    define(node, 'parent', prev);\n    define(open, 'parent', node);\n    this.push('paren', node);\n    prev.nodes.push(node);\n  })\n  /**\n   * Extglob close: \")\"\n   */\n  .capture('paren.close', function () {\n    var parsed = this.parsed;\n    var pos = this.position();\n    var m = this.match(/^\\)/);\n    if (!m) return;\n    var parent = this.pop('paren');\n    var node = pos({\n      type: 'paren.close',\n      rest: this.input,\n      parsed: parsed,\n      val: m[0]\n    });\n\n    if (!this.isType(parent, 'paren')) {\n      if (this.options.strict) {\n        throw new Error('missing opening paren: \"(\"');\n      }\n\n      node.escaped = true;\n      return node;\n    }\n\n    node.prefix = parent.prefix;\n    parent.nodes.push(node);\n    define(node, 'parent', parent);\n  })\n  /**\n   * Escape: \"\\\\.\"\n   */\n  .capture('escape', function () {\n    var pos = this.position();\n    var m = this.match(/^\\\\(.)/);\n    if (!m) return;\n    return pos({\n      type: 'escape',\n      val: m[0],\n      ch: m[1]\n    });\n  })\n  /**\n   * Question marks: \"?\"\n   */\n  .capture('qmark', function () {\n    var parsed = this.parsed;\n    var pos = this.position();\n    var m = this.match(/^\\?+(?!\\()/);\n    if (!m) return;\n    extglob.state.metachar = true;\n    return pos({\n      type: 'qmark',\n      rest: this.input,\n      parsed: parsed,\n      val: m[0]\n    });\n  })\n  /**\n   * Character parsers\n   */\n  .capture('star', /^\\*(?!\\()/).capture('plus', /^\\+(?!\\()/).capture('dot', /^\\./).capture('text', not);\n}\n\n;\n/**\n * Expose text regex string\n */\n\nmodule.exports.TEXT_REGEX = TEXT_REGEX;\n/**\n * Extglob parsers\n */\n\nmodule.exports = parsers;","map":{"version":3,"sources":["/Users/rachelmcgrath/Desktop/projects/product-shop/client/node_modules/extglob/lib/parsers.js"],"names":["brackets","require","define","utils","TEXT_REGEX","not","createRegex","parsers","extglob","state","use","parser","sets","paren","capture","parsed","pos","position","m","match","prev","prefix","val","open","type","node","nodes","input","push","parent","pop","rest","isType","options","strict","Error","escaped","ch","metachar","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\nvar brackets = require('expand-brackets');\nvar define = require('define-property');\nvar utils = require('./utils');\n\n/**\n * Characters to use in text regex (we want to \"not\" match\n * characters that are matched by other parsers)\n */\n\nvar TEXT_REGEX = '([!@*?+]?\\\\(|\\\\)|[*?.+\\\\\\\\]|\\\\[:?(?=.*\\\\])|:?\\\\])+';\nvar not = utils.createRegex(TEXT_REGEX);\n\n/**\n * Extglob parsers\n */\n\nfunction parsers(extglob) {\n  extglob.state = extglob.state || {};\n\n  /**\n   * Use `expand-brackets` parsers\n   */\n\n  extglob.use(brackets.parsers);\n  extglob.parser.sets.paren = extglob.parser.sets.paren || [];\n  extglob.parser\n\n    /**\n     * Extglob open: \"*(\"\n     */\n\n    .capture('paren.open', function() {\n      var parsed = this.parsed;\n      var pos = this.position();\n      var m = this.match(/^([!@*?+])?\\(/);\n      if (!m) return;\n\n      var prev = this.prev();\n      var prefix = m[1];\n      var val = m[0];\n\n      var open = pos({\n        type: 'paren.open',\n        parsed: parsed,\n        val: val\n      });\n\n      var node = pos({\n        type: 'paren',\n        prefix: prefix,\n        nodes: [open]\n      });\n\n      // if nested negation extglobs, just cancel them out to simplify\n      if (prefix === '!' && prev.type === 'paren' && prev.prefix === '!') {\n        prev.prefix = '@';\n        node.prefix = '@';\n      }\n\n      define(node, 'rest', this.input);\n      define(node, 'parsed', parsed);\n      define(node, 'parent', prev);\n      define(open, 'parent', node);\n\n      this.push('paren', node);\n      prev.nodes.push(node);\n    })\n\n    /**\n     * Extglob close: \")\"\n     */\n\n    .capture('paren.close', function() {\n      var parsed = this.parsed;\n      var pos = this.position();\n      var m = this.match(/^\\)/);\n      if (!m) return;\n\n      var parent = this.pop('paren');\n      var node = pos({\n        type: 'paren.close',\n        rest: this.input,\n        parsed: parsed,\n        val: m[0]\n      });\n\n      if (!this.isType(parent, 'paren')) {\n        if (this.options.strict) {\n          throw new Error('missing opening paren: \"(\"');\n        }\n        node.escaped = true;\n        return node;\n      }\n\n      node.prefix = parent.prefix;\n      parent.nodes.push(node);\n      define(node, 'parent', parent);\n    })\n\n    /**\n     * Escape: \"\\\\.\"\n     */\n\n    .capture('escape', function() {\n      var pos = this.position();\n      var m = this.match(/^\\\\(.)/);\n      if (!m) return;\n\n      return pos({\n        type: 'escape',\n        val: m[0],\n        ch: m[1]\n      });\n    })\n\n    /**\n     * Question marks: \"?\"\n     */\n\n    .capture('qmark', function() {\n      var parsed = this.parsed;\n      var pos = this.position();\n      var m = this.match(/^\\?+(?!\\()/);\n      if (!m) return;\n      extglob.state.metachar = true;\n      return pos({\n        type: 'qmark',\n        rest: this.input,\n        parsed: parsed,\n        val: m[0]\n      });\n    })\n\n    /**\n     * Character parsers\n     */\n\n    .capture('star', /^\\*(?!\\()/)\n    .capture('plus', /^\\+(?!\\()/)\n    .capture('dot', /^\\./)\n    .capture('text', not);\n};\n\n/**\n * Expose text regex string\n */\n\nmodule.exports.TEXT_REGEX = TEXT_REGEX;\n\n/**\n * Extglob parsers\n */\n\nmodule.exports = parsers;\n"]},"metadata":{},"sourceType":"script"}