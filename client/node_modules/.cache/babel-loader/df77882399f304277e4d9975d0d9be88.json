{"ast":null,"code":"var _ = require('lodash');\n\nvar url = require('url');\n\nvar ERRORS = require('./errors');\n\nvar logger = require('./logger').getInstance();\n\nmodule.exports = {\n  createConfig: createConfig\n};\n\nfunction createConfig(context, opts) {\n  // structure of config object to be returned\n  var config = {\n    context: undefined,\n    options: {}\n  }; // app.use('/api', proxy({target:'http://localhost:9000'}));\n\n  if (isContextless(context, opts)) {\n    config.context = '/';\n    config.options = _.assign(config.options, context); // app.use('/api', proxy('http://localhost:9000'));\n    // app.use(proxy('http://localhost:9000/api'));\n  } else if (isStringShortHand(context)) {\n    var oUrl = url.parse(context);\n    var target = [oUrl.protocol, '//', oUrl.host].join('');\n    config.context = oUrl.pathname || '/';\n    config.options = _.assign(config.options, {\n      target: target\n    }, opts);\n\n    if (oUrl.protocol === 'ws:' || oUrl.protocol === 'wss:') {\n      config.options.ws = true;\n    } // app.use('/api', proxy({target:'http://localhost:9000'}));\n\n  } else {\n    config.context = context;\n    config.options = _.assign(config.options, opts);\n  }\n\n  configureLogger(config.options);\n\n  if (!config.options.target) {\n    throw new Error(ERRORS.ERR_CONFIG_FACTORY_TARGET_MISSING);\n  } // Legacy option.proxyHost\n\n\n  config.options = mapLegacyProxyHostOption(config.options); // Legacy option.proxyTable > option.router\n\n  config.options = mapLegacyProxyTableOption(config.options);\n  return config;\n}\n/**\n * Checks if a String only target/config is provided.\n * This can be just the host or with the optional path.\n *\n * @example\n *      app.use('/api', proxy('http://localhost:9000'));\n        app.use(proxy('http://localhost:9000/api'));\n *\n * @param  {String}  context [description]\n * @return {Boolean}         [description]\n */\n\n\nfunction isStringShortHand(context) {\n  if (_.isString(context)) {\n    return !!url.parse(context).host;\n  }\n}\n/**\n * Checks if a Object only config is provided, without a context.\n * In this case the all paths will be proxied.\n *\n * @example\n *     app.use('/api', proxy({target:'http://localhost:9000'}));\n *\n * @param  {Object}  context [description]\n * @param  {*}       opts    [description]\n * @return {Boolean}         [description]\n */\n\n\nfunction isContextless(context, opts) {\n  return _.isPlainObject(context) && _.isEmpty(opts);\n}\n\nfunction mapLegacyProxyHostOption(options) {\n  // set options.headers.host when option.proxyHost is provided\n  if (options.proxyHost) {\n    logger.warn('*************************************');\n    logger.warn('[HPM] Deprecated \"option.proxyHost\"');\n    logger.warn('      Use \"option.changeOrigin\" or \"option.headers.host\" instead');\n    logger.warn('      \"option.proxyHost\" will be removed in future release.');\n    logger.warn('*************************************');\n    options.headers = options.headers || {};\n    options.headers.host = options.proxyHost;\n  }\n\n  return options;\n} // Warn deprecated proxyTable api usage\n\n\nfunction mapLegacyProxyTableOption(options) {\n  if (options.proxyTable) {\n    logger.warn('*************************************');\n    logger.warn('[HPM] Deprecated \"option.proxyTable\"');\n    logger.warn('      Use \"option.router\" instead');\n    logger.warn('      \"option.proxyTable\" will be removed in future release.');\n    logger.warn('*************************************');\n    options.router = _.clone(options.proxyTable);\n\n    _.omit(options, 'proxyTable');\n  }\n\n  return options;\n}\n\nfunction configureLogger(options) {\n  if (options.logLevel) {\n    logger.setLevel(options.logLevel);\n  }\n\n  if (options.logProvider) {\n    logger.setProvider(options.logProvider);\n  }\n}","map":{"version":3,"sources":["/Users/rachelmcgrath/Desktop/projects/product-shop/client/node_modules/http-proxy-middleware/lib/config-factory.js"],"names":["_","require","url","ERRORS","logger","getInstance","module","exports","createConfig","context","opts","config","undefined","options","isContextless","assign","isStringShortHand","oUrl","parse","target","protocol","host","join","pathname","ws","configureLogger","Error","ERR_CONFIG_FACTORY_TARGET_MISSING","mapLegacyProxyHostOption","mapLegacyProxyTableOption","isString","isPlainObject","isEmpty","proxyHost","warn","headers","proxyTable","router","clone","omit","logLevel","setLevel","logProvider","setProvider"],"mappings":"AAAA,IAAIA,CAAC,GAAGC,OAAO,CAAC,QAAD,CAAf;;AACA,IAAIC,GAAG,GAAGD,OAAO,CAAC,KAAD,CAAjB;;AACA,IAAIE,MAAM,GAAGF,OAAO,CAAC,UAAD,CAApB;;AACA,IAAIG,MAAM,GAAGH,OAAO,CAAC,UAAD,CAAP,CAAoBI,WAApB,EAAb;;AAEAC,MAAM,CAACC,OAAP,GAAiB;AACfC,EAAAA,YAAY,EAAEA;AADC,CAAjB;;AAIA,SAASA,YAAT,CAAsBC,OAAtB,EAA+BC,IAA/B,EAAqC;AACnC;AACA,MAAIC,MAAM,GAAG;AACXF,IAAAA,OAAO,EAAEG,SADE;AAEXC,IAAAA,OAAO,EAAE;AAFE,GAAb,CAFmC,CAOnC;;AACA,MAAIC,aAAa,CAACL,OAAD,EAAUC,IAAV,CAAjB,EAAkC;AAChCC,IAAAA,MAAM,CAACF,OAAP,GAAiB,GAAjB;AACAE,IAAAA,MAAM,CAACE,OAAP,GAAiBb,CAAC,CAACe,MAAF,CAASJ,MAAM,CAACE,OAAhB,EAAyBJ,OAAzB,CAAjB,CAFgC,CAIhC;AACA;AACD,GAND,MAMO,IAAIO,iBAAiB,CAACP,OAAD,CAArB,EAAgC;AACrC,QAAIQ,IAAI,GAAGf,GAAG,CAACgB,KAAJ,CAAUT,OAAV,CAAX;AACA,QAAIU,MAAM,GAAG,CAACF,IAAI,CAACG,QAAN,EAAgB,IAAhB,EAAsBH,IAAI,CAACI,IAA3B,EAAiCC,IAAjC,CAAsC,EAAtC,CAAb;AAEAX,IAAAA,MAAM,CAACF,OAAP,GAAiBQ,IAAI,CAACM,QAAL,IAAiB,GAAlC;AACAZ,IAAAA,MAAM,CAACE,OAAP,GAAiBb,CAAC,CAACe,MAAF,CAASJ,MAAM,CAACE,OAAhB,EAAyB;AAAEM,MAAAA,MAAM,EAAEA;AAAV,KAAzB,EAA6CT,IAA7C,CAAjB;;AAEA,QAAIO,IAAI,CAACG,QAAL,KAAkB,KAAlB,IAA2BH,IAAI,CAACG,QAAL,KAAkB,MAAjD,EAAyD;AACvDT,MAAAA,MAAM,CAACE,OAAP,CAAeW,EAAf,GAAoB,IAApB;AACD,KAToC,CAUrC;;AACD,GAXM,MAWA;AACLb,IAAAA,MAAM,CAACF,OAAP,GAAiBA,OAAjB;AACAE,IAAAA,MAAM,CAACE,OAAP,GAAiBb,CAAC,CAACe,MAAF,CAASJ,MAAM,CAACE,OAAhB,EAAyBH,IAAzB,CAAjB;AACD;;AAEDe,EAAAA,eAAe,CAACd,MAAM,CAACE,OAAR,CAAf;;AAEA,MAAI,CAACF,MAAM,CAACE,OAAP,CAAeM,MAApB,EAA4B;AAC1B,UAAM,IAAIO,KAAJ,CAAUvB,MAAM,CAACwB,iCAAjB,CAAN;AACD,GAlCkC,CAoCnC;;;AACAhB,EAAAA,MAAM,CAACE,OAAP,GAAiBe,wBAAwB,CAACjB,MAAM,CAACE,OAAR,CAAzC,CArCmC,CAuCnC;;AACAF,EAAAA,MAAM,CAACE,OAAP,GAAiBgB,yBAAyB,CAAClB,MAAM,CAACE,OAAR,CAA1C;AAEA,SAAOF,MAAP;AACD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASK,iBAAT,CAA2BP,OAA3B,EAAoC;AAClC,MAAIT,CAAC,CAAC8B,QAAF,CAAWrB,OAAX,CAAJ,EAAyB;AACvB,WAAO,CAAC,CAACP,GAAG,CAACgB,KAAJ,CAAUT,OAAV,EAAmBY,IAA5B;AACD;AACF;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASP,aAAT,CAAuBL,OAAvB,EAAgCC,IAAhC,EAAsC;AACpC,SAAOV,CAAC,CAAC+B,aAAF,CAAgBtB,OAAhB,KAA4BT,CAAC,CAACgC,OAAF,CAAUtB,IAAV,CAAnC;AACD;;AAED,SAASkB,wBAAT,CAAkCf,OAAlC,EAA2C;AACzC;AACA,MAAIA,OAAO,CAACoB,SAAZ,EAAuB;AACrB7B,IAAAA,MAAM,CAAC8B,IAAP,CAAY,uCAAZ;AACA9B,IAAAA,MAAM,CAAC8B,IAAP,CAAY,qCAAZ;AACA9B,IAAAA,MAAM,CAAC8B,IAAP,CACE,kEADF;AAGA9B,IAAAA,MAAM,CAAC8B,IAAP,CAAY,6DAAZ;AACA9B,IAAAA,MAAM,CAAC8B,IAAP,CAAY,uCAAZ;AAEArB,IAAAA,OAAO,CAACsB,OAAR,GAAkBtB,OAAO,CAACsB,OAAR,IAAmB,EAArC;AACAtB,IAAAA,OAAO,CAACsB,OAAR,CAAgBd,IAAhB,GAAuBR,OAAO,CAACoB,SAA/B;AACD;;AAED,SAAOpB,OAAP;AACD,C,CAED;;;AACA,SAASgB,yBAAT,CAAmChB,OAAnC,EAA4C;AAC1C,MAAIA,OAAO,CAACuB,UAAZ,EAAwB;AACtBhC,IAAAA,MAAM,CAAC8B,IAAP,CAAY,uCAAZ;AACA9B,IAAAA,MAAM,CAAC8B,IAAP,CAAY,sCAAZ;AACA9B,IAAAA,MAAM,CAAC8B,IAAP,CAAY,mCAAZ;AACA9B,IAAAA,MAAM,CAAC8B,IAAP,CAAY,8DAAZ;AACA9B,IAAAA,MAAM,CAAC8B,IAAP,CAAY,uCAAZ;AAEArB,IAAAA,OAAO,CAACwB,MAAR,GAAiBrC,CAAC,CAACsC,KAAF,CAAQzB,OAAO,CAACuB,UAAhB,CAAjB;;AACApC,IAAAA,CAAC,CAACuC,IAAF,CAAO1B,OAAP,EAAgB,YAAhB;AACD;;AAED,SAAOA,OAAP;AACD;;AAED,SAASY,eAAT,CAAyBZ,OAAzB,EAAkC;AAChC,MAAIA,OAAO,CAAC2B,QAAZ,EAAsB;AACpBpC,IAAAA,MAAM,CAACqC,QAAP,CAAgB5B,OAAO,CAAC2B,QAAxB;AACD;;AAED,MAAI3B,OAAO,CAAC6B,WAAZ,EAAyB;AACvBtC,IAAAA,MAAM,CAACuC,WAAP,CAAmB9B,OAAO,CAAC6B,WAA3B;AACD;AACF","sourcesContent":["var _ = require('lodash')\nvar url = require('url')\nvar ERRORS = require('./errors')\nvar logger = require('./logger').getInstance()\n\nmodule.exports = {\n  createConfig: createConfig\n}\n\nfunction createConfig(context, opts) {\n  // structure of config object to be returned\n  var config = {\n    context: undefined,\n    options: {}\n  }\n\n  // app.use('/api', proxy({target:'http://localhost:9000'}));\n  if (isContextless(context, opts)) {\n    config.context = '/'\n    config.options = _.assign(config.options, context)\n\n    // app.use('/api', proxy('http://localhost:9000'));\n    // app.use(proxy('http://localhost:9000/api'));\n  } else if (isStringShortHand(context)) {\n    var oUrl = url.parse(context)\n    var target = [oUrl.protocol, '//', oUrl.host].join('')\n\n    config.context = oUrl.pathname || '/'\n    config.options = _.assign(config.options, { target: target }, opts)\n\n    if (oUrl.protocol === 'ws:' || oUrl.protocol === 'wss:') {\n      config.options.ws = true\n    }\n    // app.use('/api', proxy({target:'http://localhost:9000'}));\n  } else {\n    config.context = context\n    config.options = _.assign(config.options, opts)\n  }\n\n  configureLogger(config.options)\n\n  if (!config.options.target) {\n    throw new Error(ERRORS.ERR_CONFIG_FACTORY_TARGET_MISSING)\n  }\n\n  // Legacy option.proxyHost\n  config.options = mapLegacyProxyHostOption(config.options)\n\n  // Legacy option.proxyTable > option.router\n  config.options = mapLegacyProxyTableOption(config.options)\n\n  return config\n}\n\n/**\n * Checks if a String only target/config is provided.\n * This can be just the host or with the optional path.\n *\n * @example\n *      app.use('/api', proxy('http://localhost:9000'));\n        app.use(proxy('http://localhost:9000/api'));\n *\n * @param  {String}  context [description]\n * @return {Boolean}         [description]\n */\nfunction isStringShortHand(context) {\n  if (_.isString(context)) {\n    return !!url.parse(context).host\n  }\n}\n\n/**\n * Checks if a Object only config is provided, without a context.\n * In this case the all paths will be proxied.\n *\n * @example\n *     app.use('/api', proxy({target:'http://localhost:9000'}));\n *\n * @param  {Object}  context [description]\n * @param  {*}       opts    [description]\n * @return {Boolean}         [description]\n */\nfunction isContextless(context, opts) {\n  return _.isPlainObject(context) && _.isEmpty(opts)\n}\n\nfunction mapLegacyProxyHostOption(options) {\n  // set options.headers.host when option.proxyHost is provided\n  if (options.proxyHost) {\n    logger.warn('*************************************')\n    logger.warn('[HPM] Deprecated \"option.proxyHost\"')\n    logger.warn(\n      '      Use \"option.changeOrigin\" or \"option.headers.host\" instead'\n    )\n    logger.warn('      \"option.proxyHost\" will be removed in future release.')\n    logger.warn('*************************************')\n\n    options.headers = options.headers || {}\n    options.headers.host = options.proxyHost\n  }\n\n  return options\n}\n\n// Warn deprecated proxyTable api usage\nfunction mapLegacyProxyTableOption(options) {\n  if (options.proxyTable) {\n    logger.warn('*************************************')\n    logger.warn('[HPM] Deprecated \"option.proxyTable\"')\n    logger.warn('      Use \"option.router\" instead')\n    logger.warn('      \"option.proxyTable\" will be removed in future release.')\n    logger.warn('*************************************')\n\n    options.router = _.clone(options.proxyTable)\n    _.omit(options, 'proxyTable')\n  }\n\n  return options\n}\n\nfunction configureLogger(options) {\n  if (options.logLevel) {\n    logger.setLevel(options.logLevel)\n  }\n\n  if (options.logProvider) {\n    logger.setProvider(options.logProvider)\n  }\n}\n"]},"metadata":{},"sourceType":"script"}