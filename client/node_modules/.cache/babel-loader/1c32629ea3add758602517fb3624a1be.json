{"ast":null,"code":"'use strict';\n\nvar util = require('util');\n\nvar visit = require('object-visit');\n/**\n * Map `visit` over an array of objects.\n *\n * @param  {Object} `collection` The context in which to invoke `method`\n * @param  {String} `method` Name of the method to call on `collection`\n * @param  {Object} `arr` Array of objects.\n */\n\n\nmodule.exports = function mapVisit(collection, method, val) {\n  if (isObject(val)) {\n    return visit.apply(null, arguments);\n  }\n\n  if (!Array.isArray(val)) {\n    throw new TypeError('expected an array: ' + util.inspect(val));\n  }\n\n  var args = [].slice.call(arguments, 3);\n\n  for (var i = 0; i < val.length; i++) {\n    var ele = val[i];\n\n    if (isObject(ele)) {\n      visit.apply(null, [collection, method, ele].concat(args));\n    } else {\n      collection[method].apply(collection, [ele].concat(args));\n    }\n  }\n};\n\nfunction isObject(val) {\n  return val && (typeof val === 'function' || !Array.isArray(val) && typeof val === 'object');\n}","map":{"version":3,"sources":["/Users/rachelmcgrath/Desktop/projects/product-shop/client/node_modules/map-visit/index.js"],"names":["util","require","visit","module","exports","mapVisit","collection","method","val","isObject","apply","arguments","Array","isArray","TypeError","inspect","args","slice","call","i","length","ele","concat"],"mappings":"AAAA;;AAEA,IAAIA,IAAI,GAAGC,OAAO,CAAC,MAAD,CAAlB;;AACA,IAAIC,KAAK,GAAGD,OAAO,CAAC,cAAD,CAAnB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEAE,MAAM,CAACC,OAAP,GAAiB,SAASC,QAAT,CAAkBC,UAAlB,EAA8BC,MAA9B,EAAsCC,GAAtC,EAA2C;AAC1D,MAAIC,QAAQ,CAACD,GAAD,CAAZ,EAAmB;AACjB,WAAON,KAAK,CAACQ,KAAN,CAAY,IAAZ,EAAkBC,SAAlB,CAAP;AACD;;AAED,MAAI,CAACC,KAAK,CAACC,OAAN,CAAcL,GAAd,CAAL,EAAyB;AACvB,UAAM,IAAIM,SAAJ,CAAc,wBAAwBd,IAAI,CAACe,OAAL,CAAaP,GAAb,CAAtC,CAAN;AACD;;AAED,MAAIQ,IAAI,GAAG,GAAGC,KAAH,CAASC,IAAT,CAAcP,SAAd,EAAyB,CAAzB,CAAX;;AAEA,OAAK,IAAIQ,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGX,GAAG,CAACY,MAAxB,EAAgCD,CAAC,EAAjC,EAAqC;AACnC,QAAIE,GAAG,GAAGb,GAAG,CAACW,CAAD,CAAb;;AACA,QAAIV,QAAQ,CAACY,GAAD,CAAZ,EAAmB;AACjBnB,MAAAA,KAAK,CAACQ,KAAN,CAAY,IAAZ,EAAkB,CAACJ,UAAD,EAAaC,MAAb,EAAqBc,GAArB,EAA0BC,MAA1B,CAAiCN,IAAjC,CAAlB;AACD,KAFD,MAEO;AACLV,MAAAA,UAAU,CAACC,MAAD,CAAV,CAAmBG,KAAnB,CAAyBJ,UAAzB,EAAqC,CAACe,GAAD,EAAMC,MAAN,CAAaN,IAAb,CAArC;AACD;AACF;AACF,CAnBD;;AAqBA,SAASP,QAAT,CAAkBD,GAAlB,EAAuB;AACrB,SAAOA,GAAG,KAAK,OAAOA,GAAP,KAAe,UAAf,IAA8B,CAACI,KAAK,CAACC,OAAN,CAAcL,GAAd,CAAD,IAAuB,OAAOA,GAAP,KAAe,QAAzE,CAAV;AACD","sourcesContent":["'use strict';\n\nvar util = require('util');\nvar visit = require('object-visit');\n\n/**\n * Map `visit` over an array of objects.\n *\n * @param  {Object} `collection` The context in which to invoke `method`\n * @param  {String} `method` Name of the method to call on `collection`\n * @param  {Object} `arr` Array of objects.\n */\n\nmodule.exports = function mapVisit(collection, method, val) {\n  if (isObject(val)) {\n    return visit.apply(null, arguments);\n  }\n\n  if (!Array.isArray(val)) {\n    throw new TypeError('expected an array: ' + util.inspect(val));\n  }\n\n  var args = [].slice.call(arguments, 3);\n\n  for (var i = 0; i < val.length; i++) {\n    var ele = val[i];\n    if (isObject(ele)) {\n      visit.apply(null, [collection, method, ele].concat(args));\n    } else {\n      collection[method].apply(collection, [ele].concat(args));\n    }\n  }\n};\n\nfunction isObject(val) {\n  return val && (typeof val === 'function' || (!Array.isArray(val) && typeof val === 'object'));\n}\n"]},"metadata":{},"sourceType":"script"}