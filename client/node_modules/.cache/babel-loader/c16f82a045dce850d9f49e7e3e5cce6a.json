{"ast":null,"code":"var _ = require('lodash');\n\nvar logger = require('./logger').getInstance();\n\nmodule.exports = {\n  init: init,\n  getHandlers: getProxyEventHandlers\n};\n\nfunction init(proxy, opts) {\n  var handlers = getProxyEventHandlers(opts);\n\n  _.forIn(handlers, function (handler, eventName) {\n    proxy.on(eventName, handlers[eventName]);\n  });\n\n  logger.debug('[HPM] Subscribed to http-proxy events: ', _.keys(handlers));\n}\n\nfunction getProxyEventHandlers(opts) {\n  // https://github.com/nodejitsu/node-http-proxy#listening-for-proxy-events\n  var proxyEvents = ['error', 'proxyReq', 'proxyReqWs', 'proxyRes', 'open', 'close'];\n  var handlers = {};\n\n  _.forEach(proxyEvents, function (event) {\n    // all handlers for the http-proxy events are prefixed with 'on'.\n    // loop through options and try to find these handlers\n    // and add them to the handlers object for subscription in init().\n    var eventName = _.camelCase('on ' + event);\n\n    var fnHandler = _.get(opts, eventName);\n\n    if (_.isFunction(fnHandler)) {\n      handlers[event] = fnHandler;\n    }\n  }); // add default error handler in absence of error handler\n\n\n  if (!_.isFunction(handlers.error)) {\n    handlers.error = defaultErrorHandler;\n  } // add default close handler in absence of close handler\n\n\n  if (!_.isFunction(handlers.close)) {\n    handlers.close = logClose;\n  }\n\n  return handlers;\n}\n\nfunction defaultErrorHandler(err, req, res) {\n  var host = req.headers && req.headers.host;\n  var code = err.code;\n\n  if (res.writeHead && !res.headersSent) {\n    if (/HPE_INVALID/.test(code)) {\n      res.writeHead(502);\n    } else {\n      switch (code) {\n        case 'ECONNRESET':\n        case 'ENOTFOUND':\n        case 'ECONNREFUSED':\n          res.writeHead(504);\n          break;\n\n        default:\n          res.writeHead(500);\n      }\n    }\n  }\n\n  res.end('Error occured while trying to proxy to: ' + host + req.url);\n}\n\nfunction logClose(req, socket, head) {\n  // view disconnected websocket connections\n  logger.info('[HPM] Client disconnected');\n}","map":{"version":3,"sources":["/Users/rachelmcgrath/Desktop/projects/product-shop/client/node_modules/http-proxy-middleware/lib/handlers.js"],"names":["_","require","logger","getInstance","module","exports","init","getHandlers","getProxyEventHandlers","proxy","opts","handlers","forIn","handler","eventName","on","debug","keys","proxyEvents","forEach","event","camelCase","fnHandler","get","isFunction","error","defaultErrorHandler","close","logClose","err","req","res","host","headers","code","writeHead","headersSent","test","end","url","socket","head","info"],"mappings":"AAAA,IAAIA,CAAC,GAAGC,OAAO,CAAC,QAAD,CAAf;;AACA,IAAIC,MAAM,GAAGD,OAAO,CAAC,UAAD,CAAP,CAAoBE,WAApB,EAAb;;AAEAC,MAAM,CAACC,OAAP,GAAiB;AACfC,EAAAA,IAAI,EAAEA,IADS;AAEfC,EAAAA,WAAW,EAAEC;AAFE,CAAjB;;AAKA,SAASF,IAAT,CAAcG,KAAd,EAAqBC,IAArB,EAA2B;AACzB,MAAIC,QAAQ,GAAGH,qBAAqB,CAACE,IAAD,CAApC;;AAEAV,EAAAA,CAAC,CAACY,KAAF,CAAQD,QAAR,EAAkB,UAASE,OAAT,EAAkBC,SAAlB,EAA6B;AAC7CL,IAAAA,KAAK,CAACM,EAAN,CAASD,SAAT,EAAoBH,QAAQ,CAACG,SAAD,CAA5B;AACD,GAFD;;AAIAZ,EAAAA,MAAM,CAACc,KAAP,CAAa,yCAAb,EAAwDhB,CAAC,CAACiB,IAAF,CAAON,QAAP,CAAxD;AACD;;AAED,SAASH,qBAAT,CAA+BE,IAA/B,EAAqC;AACnC;AACA,MAAIQ,WAAW,GAAG,CAChB,OADgB,EAEhB,UAFgB,EAGhB,YAHgB,EAIhB,UAJgB,EAKhB,MALgB,EAMhB,OANgB,CAAlB;AAQA,MAAIP,QAAQ,GAAG,EAAf;;AAEAX,EAAAA,CAAC,CAACmB,OAAF,CAAUD,WAAV,EAAuB,UAASE,KAAT,EAAgB;AACrC;AACA;AACA;AACA,QAAIN,SAAS,GAAGd,CAAC,CAACqB,SAAF,CAAY,QAAQD,KAApB,CAAhB;;AACA,QAAIE,SAAS,GAAGtB,CAAC,CAACuB,GAAF,CAAMb,IAAN,EAAYI,SAAZ,CAAhB;;AAEA,QAAId,CAAC,CAACwB,UAAF,CAAaF,SAAb,CAAJ,EAA6B;AAC3BX,MAAAA,QAAQ,CAACS,KAAD,CAAR,GAAkBE,SAAlB;AACD;AACF,GAVD,EAZmC,CAwBnC;;;AACA,MAAI,CAACtB,CAAC,CAACwB,UAAF,CAAab,QAAQ,CAACc,KAAtB,CAAL,EAAmC;AACjCd,IAAAA,QAAQ,CAACc,KAAT,GAAiBC,mBAAjB;AACD,GA3BkC,CA6BnC;;;AACA,MAAI,CAAC1B,CAAC,CAACwB,UAAF,CAAab,QAAQ,CAACgB,KAAtB,CAAL,EAAmC;AACjChB,IAAAA,QAAQ,CAACgB,KAAT,GAAiBC,QAAjB;AACD;;AAED,SAAOjB,QAAP;AACD;;AAED,SAASe,mBAAT,CAA6BG,GAA7B,EAAkCC,GAAlC,EAAuCC,GAAvC,EAA4C;AAC1C,MAAIC,IAAI,GAAGF,GAAG,CAACG,OAAJ,IAAeH,GAAG,CAACG,OAAJ,CAAYD,IAAtC;AACA,MAAIE,IAAI,GAAGL,GAAG,CAACK,IAAf;;AAEA,MAAIH,GAAG,CAACI,SAAJ,IAAiB,CAACJ,GAAG,CAACK,WAA1B,EAAuC;AACrC,QAAI,cAAcC,IAAd,CAAmBH,IAAnB,CAAJ,EAA8B;AAC5BH,MAAAA,GAAG,CAACI,SAAJ,CAAc,GAAd;AACD,KAFD,MAEO;AACL,cAAQD,IAAR;AACE,aAAK,YAAL;AACA,aAAK,WAAL;AACA,aAAK,cAAL;AACEH,UAAAA,GAAG,CAACI,SAAJ,CAAc,GAAd;AACA;;AACF;AACEJ,UAAAA,GAAG,CAACI,SAAJ,CAAc,GAAd;AAPJ;AASD;AACF;;AAEDJ,EAAAA,GAAG,CAACO,GAAJ,CAAQ,6CAA6CN,IAA7C,GAAoDF,GAAG,CAACS,GAAhE;AACD;;AAED,SAASX,QAAT,CAAkBE,GAAlB,EAAuBU,MAAvB,EAA+BC,IAA/B,EAAqC;AACnC;AACAvC,EAAAA,MAAM,CAACwC,IAAP,CAAY,2BAAZ;AACD","sourcesContent":["var _ = require('lodash')\nvar logger = require('./logger').getInstance()\n\nmodule.exports = {\n  init: init,\n  getHandlers: getProxyEventHandlers\n}\n\nfunction init(proxy, opts) {\n  var handlers = getProxyEventHandlers(opts)\n\n  _.forIn(handlers, function(handler, eventName) {\n    proxy.on(eventName, handlers[eventName])\n  })\n\n  logger.debug('[HPM] Subscribed to http-proxy events: ', _.keys(handlers))\n}\n\nfunction getProxyEventHandlers(opts) {\n  // https://github.com/nodejitsu/node-http-proxy#listening-for-proxy-events\n  var proxyEvents = [\n    'error',\n    'proxyReq',\n    'proxyReqWs',\n    'proxyRes',\n    'open',\n    'close'\n  ]\n  var handlers = {}\n\n  _.forEach(proxyEvents, function(event) {\n    // all handlers for the http-proxy events are prefixed with 'on'.\n    // loop through options and try to find these handlers\n    // and add them to the handlers object for subscription in init().\n    var eventName = _.camelCase('on ' + event)\n    var fnHandler = _.get(opts, eventName)\n\n    if (_.isFunction(fnHandler)) {\n      handlers[event] = fnHandler\n    }\n  })\n\n  // add default error handler in absence of error handler\n  if (!_.isFunction(handlers.error)) {\n    handlers.error = defaultErrorHandler\n  }\n\n  // add default close handler in absence of close handler\n  if (!_.isFunction(handlers.close)) {\n    handlers.close = logClose\n  }\n\n  return handlers\n}\n\nfunction defaultErrorHandler(err, req, res) {\n  var host = req.headers && req.headers.host\n  var code = err.code\n\n  if (res.writeHead && !res.headersSent) {\n    if (/HPE_INVALID/.test(code)) {\n      res.writeHead(502)\n    } else {\n      switch (code) {\n        case 'ECONNRESET':\n        case 'ENOTFOUND':\n        case 'ECONNREFUSED':\n          res.writeHead(504)\n          break\n        default:\n          res.writeHead(500)\n      }\n    }\n  }\n\n  res.end('Error occured while trying to proxy to: ' + host + req.url)\n}\n\nfunction logClose(req, socket, head) {\n  // view disconnected websocket connections\n  logger.info('[HPM] Client disconnected')\n}\n"]},"metadata":{},"sourceType":"script"}