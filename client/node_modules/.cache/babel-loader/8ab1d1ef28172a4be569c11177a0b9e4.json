{"ast":null,"code":"import * as actionTypes from \"./actionTypes\";\nimport { returnErrors } from \"./errorActions\";\nimport axios from \"axios\"; //* Check token and load user\n\nexport const loadUser = () => (dispatch, getState) => {\n  //* User loading\n  dispatch({\n    type: actionTypes.USER_LOADING\n  });\n  axios.get('/api/auth/user', tokenConfig(getState)).then(res => dispatch({\n    type: actionTypes.USER_LOADED,\n    payload: res.data\n  })).catch(err => {\n    dispatch(returnErrors(err.response.data, err.response.status));\n    dispatch({\n      type: actionTypes.AUTH_ERROR\n    });\n  });\n};\nexport const register = ({\n  name,\n  email,\n  password\n}) => dispatch => {\n  // Headers \n  const config = {\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  }; // Request body\n\n  const body = JSON.stringify({\n    name,\n    email,\n    password\n  });\n  axios.post(\"/api/users/\", body, config).then(res => dispatch({\n    type: actionTypes.REGISTER_SUCCESS,\n    payload: res.data\n  })).catch(err => {\n    dispatch(returnErrors(err.response.data, err.response.status, 'REGISTER_FAIL'));\n    dispatch({\n      type: actionTypes.REGISTER_FAIL\n    });\n  });\n};\nexport const login = ({\n  email,\n  password\n}) => dispatch => {\n  // Headers \n  const config = {\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  }; // Request body\n\n  const body = JSON.stringify({\n    email,\n    password\n  });\n  axios.post(\"/api/auth\", body, config).then(res => dispatch({\n    type: actionTypes.LOGIN_SUCCESS,\n    payload: res.data\n  })).catch(err => {\n    dispatch(returnErrors(err.response.data, err.response.status, 'LOGIN_FAIL'));\n    dispatch({\n      type: actionTypes.LOGIN_FAIL\n    });\n  });\n};\nexport const logOut = () => {\n  return {\n    type: actionTypes.LOGOUT_SUCCESS\n  };\n}; //* Setup config/headers and token\n\nexport const tokenConfig = getState => {\n  //* GET token from localstorage\n  const token = getState().auth.token; //* headers\n\n  const config = {\n    headers: {\n      \"Content-type\": \"application/json\"\n    }\n  };\n\n  if (token) {\n    config.headers['x-auth-token'] = token;\n  }\n\n  return config;\n};","map":{"version":3,"sources":["/Users/rachelmcgrath/Desktop/projects/product-shop/client/src/store/actions/authActions.js"],"names":["actionTypes","returnErrors","axios","loadUser","dispatch","getState","type","USER_LOADING","get","tokenConfig","then","res","USER_LOADED","payload","data","catch","err","response","status","AUTH_ERROR","register","name","email","password","config","headers","body","JSON","stringify","post","REGISTER_SUCCESS","REGISTER_FAIL","login","LOGIN_SUCCESS","LOGIN_FAIL","logOut","LOGOUT_SUCCESS","token","auth"],"mappings":"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","sourcesContent":["import * as actionTypes from \"./actionTypes\";\nimport { returnErrors } from \"./errorActions\";\nimport axios from \"axios\";\n\n//* Check token and load user\n\nexport const loadUser = () => (dispatch, getState) => {\n    //* User loading\n    dispatch({ type: actionTypes.USER_LOADING })\n\n    axios.get('/api/auth/user', tokenConfig(getState))\n        .then(res => dispatch({\n            type: actionTypes.USER_LOADED,\n            payload: res.data\n        }))\n        .catch(err => {\n            dispatch(returnErrors(err.response.data, err.response.status));\n            dispatch({\n                type: actionTypes.AUTH_ERROR\n            })\n        })\n}\n\nexport const register = ({ name, email, password }) => dispatch => {\n    // Headers \n    const config = {\n        headers: {\n            \"Content-Type\": \"application/json\"\n        }\n    }\n    // Request body\n    const body = JSON.stringify({ name, email, password });\n    axios.post(\"/api/users/\", body, config)\n        .then(res => dispatch({\n            type: actionTypes.REGISTER_SUCCESS,\n            payload: res.data\n        }))\n        .catch(err => {\n            dispatch(returnErrors(err.response.data, err.response.status, 'REGISTER_FAIL'));\n            dispatch({\n                type: actionTypes.REGISTER_FAIL\n            })\n        })\n}\n\nexport const login = ({ email, password }) => dispatch => {\n    // Headers \n    const config = {\n        headers: {\n            \"Content-Type\": \"application/json\"\n        }\n    }\n    // Request body\n    const body = JSON.stringify({ email, password });\n    axios.post(\"/api/auth\", body, config)\n        .then(res => dispatch({\n            type: actionTypes.LOGIN_SUCCESS,\n            payload: res.data\n        }))\n        .catch(err => {\n            dispatch(returnErrors(err.response.data, err.response.status, 'LOGIN_FAIL'));\n            dispatch({\n                type: actionTypes.LOGIN_FAIL\n            })\n        })\n}\n\nexport const logOut = () => {\n    return {\n        type: actionTypes.LOGOUT_SUCCESS\n    }\n}\n\n//* Setup config/headers and token\nexport const tokenConfig = getState => {\n    //* GET token from localstorage\n    const token = getState().auth.token;\n    //* headers\n    const config = {\n        headers: {\n            \"Content-type\": \"application/json\"\n        }\n    }\n    if (token) {\n        config.headers['x-auth-token'] = token;\n    }\n    return config;\n}"]},"metadata":{},"sourceType":"module"}