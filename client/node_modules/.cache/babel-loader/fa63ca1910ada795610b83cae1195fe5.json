{"ast":null,"code":"var util = require('util');\n\nvar _ = require('lodash');\n\nvar loggerInstance;\nvar defaultProvider = {\n  log: console.log,\n  debug: console.log,\n  // use .log(); since console does not have .debug()\n  info: console.info,\n  warn: console.warn,\n  error: console.error\n}; // log level 'weight'\n\nvar LEVELS = {\n  debug: 10,\n  info: 20,\n  warn: 30,\n  error: 50,\n  silent: 80\n};\nmodule.exports = {\n  // singleton\n  getInstance: function () {\n    if (!loggerInstance) {\n      loggerInstance = new Logger();\n    }\n\n    return loggerInstance;\n  },\n  getArrow: getArrow\n};\n\nfunction Logger() {\n  var logLevel;\n  var provider;\n  var api = {\n    log: log,\n    debug: debug,\n    info: info,\n    warn: warn,\n    error: error,\n    setLevel: function (v) {\n      if (isValidLevel(v)) {\n        logLevel = v;\n      }\n    },\n    setProvider: function (fn) {\n      if (fn && isValidProvider(fn)) {\n        provider = fn(defaultProvider);\n      }\n    }\n  };\n  init();\n  return api;\n\n  function init() {\n    api.setLevel('info');\n    api.setProvider(function () {\n      return defaultProvider;\n    });\n  } // log will log messages, regardless of logLevels\n\n\n  function log() {\n    provider.log(_interpolate.apply(null, arguments));\n  }\n\n  function debug() {\n    if (_showLevel('debug')) {\n      provider.debug(_interpolate.apply(null, arguments));\n    }\n  }\n\n  function info() {\n    if (_showLevel('info')) {\n      provider.info(_interpolate.apply(null, arguments));\n    }\n  }\n\n  function warn() {\n    if (_showLevel('warn')) {\n      provider.warn(_interpolate.apply(null, arguments));\n    }\n  }\n\n  function error() {\n    if (_showLevel('error')) {\n      provider.error(_interpolate.apply(null, arguments));\n    }\n  }\n  /**\n   * Decide to log or not to log, based on the log levels 'weight'\n   * @param  {String}  showLevel [debug, info, warn, error, silent]\n   * @return {Boolean}\n   */\n\n\n  function _showLevel(showLevel) {\n    var result = false;\n    var currentLogLevel = LEVELS[logLevel];\n\n    if (currentLogLevel && currentLogLevel <= LEVELS[showLevel]) {\n      result = true;\n    }\n\n    return result;\n  } // make sure logged messages and its data are return interpolated\n  // make it possible for additional log data, such date/time or custom prefix.\n\n\n  function _interpolate() {\n    var fn = _.spread(util.format);\n\n    var result = fn(_.slice(arguments));\n    return result;\n  }\n\n  function isValidProvider(fnProvider) {\n    var result = true;\n\n    if (fnProvider && !_.isFunction(fnProvider)) {\n      throw new Error('[HPM] Log provider config error. Expecting a function.');\n    }\n\n    return result;\n  }\n\n  function isValidLevel(levelName) {\n    var validLevels = _.keys(LEVELS);\n\n    var isValid = _.includes(validLevels, levelName);\n\n    if (!isValid) {\n      throw new Error('[HPM] Log level error. Invalid logLevel.');\n    }\n\n    return isValid;\n  }\n}\n/**\n * -> normal proxy\n * => router\n * ~> pathRewrite\n * ≈> router + pathRewrite\n *\n * @param  {String} originalPath\n * @param  {String} newPath\n * @param  {String} originalTarget\n * @param  {String} newTarget\n * @return {String}\n */\n\n\nfunction getArrow(originalPath, newPath, originalTarget, newTarget) {\n  var arrow = ['>'];\n  var isNewTarget = originalTarget !== newTarget; // router\n\n  var isNewPath = originalPath !== newPath; // pathRewrite\n\n  if (isNewPath && !isNewTarget) {\n    arrow.unshift('~');\n  } else if (!isNewPath && isNewTarget) {\n    arrow.unshift('=');\n  } else if (isNewPath && isNewTarget) {\n    arrow.unshift('≈');\n  } else {\n    arrow.unshift('-');\n  }\n\n  return arrow.join('');\n}","map":{"version":3,"sources":["/Users/rachelmcgrath/Desktop/projects/product-shop/client/node_modules/http-proxy-middleware/lib/logger.js"],"names":["util","require","_","loggerInstance","defaultProvider","log","console","debug","info","warn","error","LEVELS","silent","module","exports","getInstance","Logger","getArrow","logLevel","provider","api","setLevel","v","isValidLevel","setProvider","fn","isValidProvider","init","_interpolate","apply","arguments","_showLevel","showLevel","result","currentLogLevel","spread","format","slice","fnProvider","isFunction","Error","levelName","validLevels","keys","isValid","includes","originalPath","newPath","originalTarget","newTarget","arrow","isNewTarget","isNewPath","unshift","join"],"mappings":"AAAA,IAAIA,IAAI,GAAGC,OAAO,CAAC,MAAD,CAAlB;;AACA,IAAIC,CAAC,GAAGD,OAAO,CAAC,QAAD,CAAf;;AAEA,IAAIE,cAAJ;AAEA,IAAIC,eAAe,GAAG;AACpBC,EAAAA,GAAG,EAAEC,OAAO,CAACD,GADO;AAEpBE,EAAAA,KAAK,EAAED,OAAO,CAACD,GAFK;AAEA;AACpBG,EAAAA,IAAI,EAAEF,OAAO,CAACE,IAHM;AAIpBC,EAAAA,IAAI,EAAEH,OAAO,CAACG,IAJM;AAKpBC,EAAAA,KAAK,EAAEJ,OAAO,CAACI;AALK,CAAtB,C,CAQA;;AACA,IAAIC,MAAM,GAAG;AACXJ,EAAAA,KAAK,EAAE,EADI;AAEXC,EAAAA,IAAI,EAAE,EAFK;AAGXC,EAAAA,IAAI,EAAE,EAHK;AAIXC,EAAAA,KAAK,EAAE,EAJI;AAKXE,EAAAA,MAAM,EAAE;AALG,CAAb;AAQAC,MAAM,CAACC,OAAP,GAAiB;AACf;AACAC,EAAAA,WAAW,EAAE,YAAW;AACtB,QAAI,CAACZ,cAAL,EAAqB;AACnBA,MAAAA,cAAc,GAAG,IAAIa,MAAJ,EAAjB;AACD;;AAED,WAAOb,cAAP;AACD,GARc;AASfc,EAAAA,QAAQ,EAAEA;AATK,CAAjB;;AAYA,SAASD,MAAT,GAAkB;AAChB,MAAIE,QAAJ;AACA,MAAIC,QAAJ;AAEA,MAAIC,GAAG,GAAG;AACRf,IAAAA,GAAG,EAAEA,GADG;AAERE,IAAAA,KAAK,EAAEA,KAFC;AAGRC,IAAAA,IAAI,EAAEA,IAHE;AAIRC,IAAAA,IAAI,EAAEA,IAJE;AAKRC,IAAAA,KAAK,EAAEA,KALC;AAMRW,IAAAA,QAAQ,EAAE,UAASC,CAAT,EAAY;AACpB,UAAIC,YAAY,CAACD,CAAD,CAAhB,EAAqB;AACnBJ,QAAAA,QAAQ,GAAGI,CAAX;AACD;AACF,KAVO;AAWRE,IAAAA,WAAW,EAAE,UAASC,EAAT,EAAa;AACxB,UAAIA,EAAE,IAAIC,eAAe,CAACD,EAAD,CAAzB,EAA+B;AAC7BN,QAAAA,QAAQ,GAAGM,EAAE,CAACrB,eAAD,CAAb;AACD;AACF;AAfO,GAAV;AAkBAuB,EAAAA,IAAI;AAEJ,SAAOP,GAAP;;AAEA,WAASO,IAAT,GAAgB;AACdP,IAAAA,GAAG,CAACC,QAAJ,CAAa,MAAb;AACAD,IAAAA,GAAG,CAACI,WAAJ,CAAgB,YAAW;AACzB,aAAOpB,eAAP;AACD,KAFD;AAGD,GA/Be,CAiChB;;;AACA,WAASC,GAAT,GAAe;AACbc,IAAAA,QAAQ,CAACd,GAAT,CAAauB,YAAY,CAACC,KAAb,CAAmB,IAAnB,EAAyBC,SAAzB,CAAb;AACD;;AAED,WAASvB,KAAT,GAAiB;AACf,QAAIwB,UAAU,CAAC,OAAD,CAAd,EAAyB;AACvBZ,MAAAA,QAAQ,CAACZ,KAAT,CAAeqB,YAAY,CAACC,KAAb,CAAmB,IAAnB,EAAyBC,SAAzB,CAAf;AACD;AACF;;AAED,WAAStB,IAAT,GAAgB;AACd,QAAIuB,UAAU,CAAC,MAAD,CAAd,EAAwB;AACtBZ,MAAAA,QAAQ,CAACX,IAAT,CAAcoB,YAAY,CAACC,KAAb,CAAmB,IAAnB,EAAyBC,SAAzB,CAAd;AACD;AACF;;AAED,WAASrB,IAAT,GAAgB;AACd,QAAIsB,UAAU,CAAC,MAAD,CAAd,EAAwB;AACtBZ,MAAAA,QAAQ,CAACV,IAAT,CAAcmB,YAAY,CAACC,KAAb,CAAmB,IAAnB,EAAyBC,SAAzB,CAAd;AACD;AACF;;AAED,WAASpB,KAAT,GAAiB;AACf,QAAIqB,UAAU,CAAC,OAAD,CAAd,EAAyB;AACvBZ,MAAAA,QAAQ,CAACT,KAAT,CAAekB,YAAY,CAACC,KAAb,CAAmB,IAAnB,EAAyBC,SAAzB,CAAf;AACD;AACF;AAED;AACF;AACA;AACA;AACA;;;AACE,WAASC,UAAT,CAAoBC,SAApB,EAA+B;AAC7B,QAAIC,MAAM,GAAG,KAAb;AACA,QAAIC,eAAe,GAAGvB,MAAM,CAACO,QAAD,CAA5B;;AAEA,QAAIgB,eAAe,IAAIA,eAAe,IAAIvB,MAAM,CAACqB,SAAD,CAAhD,EAA6D;AAC3DC,MAAAA,MAAM,GAAG,IAAT;AACD;;AAED,WAAOA,MAAP;AACD,GA5Ee,CA8EhB;AACA;;;AACA,WAASL,YAAT,GAAwB;AACtB,QAAIH,EAAE,GAAGvB,CAAC,CAACiC,MAAF,CAASnC,IAAI,CAACoC,MAAd,CAAT;;AACA,QAAIH,MAAM,GAAGR,EAAE,CAACvB,CAAC,CAACmC,KAAF,CAAQP,SAAR,CAAD,CAAf;AAEA,WAAOG,MAAP;AACD;;AAED,WAASP,eAAT,CAAyBY,UAAzB,EAAqC;AACnC,QAAIL,MAAM,GAAG,IAAb;;AAEA,QAAIK,UAAU,IAAI,CAACpC,CAAC,CAACqC,UAAF,CAAaD,UAAb,CAAnB,EAA6C;AAC3C,YAAM,IAAIE,KAAJ,CAAU,wDAAV,CAAN;AACD;;AAED,WAAOP,MAAP;AACD;;AAED,WAASV,YAAT,CAAsBkB,SAAtB,EAAiC;AAC/B,QAAIC,WAAW,GAAGxC,CAAC,CAACyC,IAAF,CAAOhC,MAAP,CAAlB;;AACA,QAAIiC,OAAO,GAAG1C,CAAC,CAAC2C,QAAF,CAAWH,WAAX,EAAwBD,SAAxB,CAAd;;AAEA,QAAI,CAACG,OAAL,EAAc;AACZ,YAAM,IAAIJ,KAAJ,CAAU,0CAAV,CAAN;AACD;;AAED,WAAOI,OAAP;AACD;AACF;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAAS3B,QAAT,CAAkB6B,YAAlB,EAAgCC,OAAhC,EAAyCC,cAAzC,EAAyDC,SAAzD,EAAoE;AAClE,MAAIC,KAAK,GAAG,CAAC,GAAD,CAAZ;AACA,MAAIC,WAAW,GAAGH,cAAc,KAAKC,SAArC,CAFkE,CAEnB;;AAC/C,MAAIG,SAAS,GAAGN,YAAY,KAAKC,OAAjC,CAHkE,CAGzB;;AAEzC,MAAIK,SAAS,IAAI,CAACD,WAAlB,EAA+B;AAC7BD,IAAAA,KAAK,CAACG,OAAN,CAAc,GAAd;AACD,GAFD,MAEO,IAAI,CAACD,SAAD,IAAcD,WAAlB,EAA+B;AACpCD,IAAAA,KAAK,CAACG,OAAN,CAAc,GAAd;AACD,GAFM,MAEA,IAAID,SAAS,IAAID,WAAjB,EAA8B;AACnCD,IAAAA,KAAK,CAACG,OAAN,CAAc,GAAd;AACD,GAFM,MAEA;AACLH,IAAAA,KAAK,CAACG,OAAN,CAAc,GAAd;AACD;;AAED,SAAOH,KAAK,CAACI,IAAN,CAAW,EAAX,CAAP;AACD","sourcesContent":["var util = require('util')\nvar _ = require('lodash')\n\nvar loggerInstance\n\nvar defaultProvider = {\n  log: console.log,\n  debug: console.log, // use .log(); since console does not have .debug()\n  info: console.info,\n  warn: console.warn,\n  error: console.error\n}\n\n// log level 'weight'\nvar LEVELS = {\n  debug: 10,\n  info: 20,\n  warn: 30,\n  error: 50,\n  silent: 80\n}\n\nmodule.exports = {\n  // singleton\n  getInstance: function() {\n    if (!loggerInstance) {\n      loggerInstance = new Logger()\n    }\n\n    return loggerInstance\n  },\n  getArrow: getArrow\n}\n\nfunction Logger() {\n  var logLevel\n  var provider\n\n  var api = {\n    log: log,\n    debug: debug,\n    info: info,\n    warn: warn,\n    error: error,\n    setLevel: function(v) {\n      if (isValidLevel(v)) {\n        logLevel = v\n      }\n    },\n    setProvider: function(fn) {\n      if (fn && isValidProvider(fn)) {\n        provider = fn(defaultProvider)\n      }\n    }\n  }\n\n  init()\n\n  return api\n\n  function init() {\n    api.setLevel('info')\n    api.setProvider(function() {\n      return defaultProvider\n    })\n  }\n\n  // log will log messages, regardless of logLevels\n  function log() {\n    provider.log(_interpolate.apply(null, arguments))\n  }\n\n  function debug() {\n    if (_showLevel('debug')) {\n      provider.debug(_interpolate.apply(null, arguments))\n    }\n  }\n\n  function info() {\n    if (_showLevel('info')) {\n      provider.info(_interpolate.apply(null, arguments))\n    }\n  }\n\n  function warn() {\n    if (_showLevel('warn')) {\n      provider.warn(_interpolate.apply(null, arguments))\n    }\n  }\n\n  function error() {\n    if (_showLevel('error')) {\n      provider.error(_interpolate.apply(null, arguments))\n    }\n  }\n\n  /**\n   * Decide to log or not to log, based on the log levels 'weight'\n   * @param  {String}  showLevel [debug, info, warn, error, silent]\n   * @return {Boolean}\n   */\n  function _showLevel(showLevel) {\n    var result = false\n    var currentLogLevel = LEVELS[logLevel]\n\n    if (currentLogLevel && currentLogLevel <= LEVELS[showLevel]) {\n      result = true\n    }\n\n    return result\n  }\n\n  // make sure logged messages and its data are return interpolated\n  // make it possible for additional log data, such date/time or custom prefix.\n  function _interpolate() {\n    var fn = _.spread(util.format)\n    var result = fn(_.slice(arguments))\n\n    return result\n  }\n\n  function isValidProvider(fnProvider) {\n    var result = true\n\n    if (fnProvider && !_.isFunction(fnProvider)) {\n      throw new Error('[HPM] Log provider config error. Expecting a function.')\n    }\n\n    return result\n  }\n\n  function isValidLevel(levelName) {\n    var validLevels = _.keys(LEVELS)\n    var isValid = _.includes(validLevels, levelName)\n\n    if (!isValid) {\n      throw new Error('[HPM] Log level error. Invalid logLevel.')\n    }\n\n    return isValid\n  }\n}\n\n/**\n * -> normal proxy\n * => router\n * ~> pathRewrite\n * ≈> router + pathRewrite\n *\n * @param  {String} originalPath\n * @param  {String} newPath\n * @param  {String} originalTarget\n * @param  {String} newTarget\n * @return {String}\n */\nfunction getArrow(originalPath, newPath, originalTarget, newTarget) {\n  var arrow = ['>']\n  var isNewTarget = originalTarget !== newTarget // router\n  var isNewPath = originalPath !== newPath // pathRewrite\n\n  if (isNewPath && !isNewTarget) {\n    arrow.unshift('~')\n  } else if (!isNewPath && isNewTarget) {\n    arrow.unshift('=')\n  } else if (isNewPath && isNewTarget) {\n    arrow.unshift('≈')\n  } else {\n    arrow.unshift('-')\n  }\n\n  return arrow.join('')\n}\n"]},"metadata":{},"sourceType":"script"}