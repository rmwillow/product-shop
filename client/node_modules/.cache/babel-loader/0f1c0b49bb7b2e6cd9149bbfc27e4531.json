{"ast":null,"code":"/*!\n * static-extend <https://github.com/jonschlinkert/static-extend>\n *\n * Copyright (c) 2016, Jon Schlinkert.\n * Licensed under the MIT License.\n */\n'use strict';\n\nvar copy = require('object-copy');\n\nvar define = require('define-property');\n\nvar util = require('util');\n/**\n * Returns a function for extending the static properties,\n * prototype properties, and descriptors from the `Parent`\n * constructor onto `Child` constructors.\n *\n * ```js\n * var extend = require('static-extend');\n * Parent.extend = extend(Parent);\n *\n * // optionally pass a custom merge function as the second arg\n * Parent.extend = extend(Parent, function(Child) {\n *   Child.prototype.mixin = function(key, val) {\n *     Child.prototype[key] = val;\n *   };\n * });\n *\n * // extend \"child\" constructors\n * Parent.extend(Child);\n *\n * // optionally define prototype methods as the second arg\n * Parent.extend(Child, {\n *   foo: function() {},\n *   bar: function() {}\n * });\n * ```\n * @param {Function} `Parent` Parent ctor\n * @param {Function} `extendFn` Optional extend function for handling any necessary custom merging. Useful when updating methods that require a specific prototype.\n *   @param {Function} `Child` Child ctor\n *   @param {Object} `proto` Optionally pass additional prototype properties to inherit.\n *   @return {Object}\n * @api public\n */\n\n\nfunction extend(Parent, extendFn) {\n  if (typeof Parent !== 'function') {\n    throw new TypeError('expected Parent to be a function.');\n  }\n\n  return function (Ctor, proto) {\n    if (typeof Ctor !== 'function') {\n      throw new TypeError('expected Ctor to be a function.');\n    }\n\n    util.inherits(Ctor, Parent);\n    copy(Ctor, Parent); // proto can be null or a plain object\n\n    if (typeof proto === 'object') {\n      var obj = Object.create(proto);\n\n      for (var k in obj) {\n        Ctor.prototype[k] = obj[k];\n      }\n    } // keep a reference to the parent prototype\n\n\n    define(Ctor.prototype, '_parent_', {\n      configurable: true,\n      set: function () {},\n      get: function () {\n        return Parent.prototype;\n      }\n    });\n\n    if (typeof extendFn === 'function') {\n      extendFn(Ctor, Parent);\n    }\n\n    Ctor.extend = extend(Ctor, extendFn);\n  };\n}\n\n;\n/**\n * Expose `extend`\n */\n\nmodule.exports = extend;","map":{"version":3,"sources":["/Users/rachelmcgrath/Desktop/projects/product-shop/client/node_modules/static-extend/index.js"],"names":["copy","require","define","util","extend","Parent","extendFn","TypeError","Ctor","proto","inherits","obj","Object","create","k","prototype","configurable","set","get","module","exports"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA,IAAIA,IAAI,GAAGC,OAAO,CAAC,aAAD,CAAlB;;AACA,IAAIC,MAAM,GAAGD,OAAO,CAAC,iBAAD,CAApB;;AACA,IAAIE,IAAI,GAAGF,OAAO,CAAC,MAAD,CAAlB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,SAASG,MAAT,CAAgBC,MAAhB,EAAwBC,QAAxB,EAAkC;AAChC,MAAI,OAAOD,MAAP,KAAkB,UAAtB,EAAkC;AAChC,UAAM,IAAIE,SAAJ,CAAc,mCAAd,CAAN;AACD;;AAED,SAAO,UAASC,IAAT,EAAeC,KAAf,EAAsB;AAC3B,QAAI,OAAOD,IAAP,KAAgB,UAApB,EAAgC;AAC9B,YAAM,IAAID,SAAJ,CAAc,iCAAd,CAAN;AACD;;AAEDJ,IAAAA,IAAI,CAACO,QAAL,CAAcF,IAAd,EAAoBH,MAApB;AACAL,IAAAA,IAAI,CAACQ,IAAD,EAAOH,MAAP,CAAJ,CAN2B,CAQ3B;;AACA,QAAI,OAAOI,KAAP,KAAiB,QAArB,EAA+B;AAC7B,UAAIE,GAAG,GAAGC,MAAM,CAACC,MAAP,CAAcJ,KAAd,CAAV;;AAEA,WAAK,IAAIK,CAAT,IAAcH,GAAd,EAAmB;AACjBH,QAAAA,IAAI,CAACO,SAAL,CAAeD,CAAf,IAAoBH,GAAG,CAACG,CAAD,CAAvB;AACD;AACF,KAf0B,CAiB3B;;;AACAZ,IAAAA,MAAM,CAACM,IAAI,CAACO,SAAN,EAAiB,UAAjB,EAA6B;AACjCC,MAAAA,YAAY,EAAE,IADmB;AAEjCC,MAAAA,GAAG,EAAE,YAAW,CAAE,CAFe;AAGjCC,MAAAA,GAAG,EAAE,YAAW;AACd,eAAOb,MAAM,CAACU,SAAd;AACD;AALgC,KAA7B,CAAN;;AAQA,QAAI,OAAOT,QAAP,KAAoB,UAAxB,EAAoC;AAClCA,MAAAA,QAAQ,CAACE,IAAD,EAAOH,MAAP,CAAR;AACD;;AAEDG,IAAAA,IAAI,CAACJ,MAAL,GAAcA,MAAM,CAACI,IAAD,EAAOF,QAAP,CAApB;AACD,GA/BD;AAgCD;;AAAA;AAED;AACA;AACA;;AAEAa,MAAM,CAACC,OAAP,GAAiBhB,MAAjB","sourcesContent":["/*!\n * static-extend <https://github.com/jonschlinkert/static-extend>\n *\n * Copyright (c) 2016, Jon Schlinkert.\n * Licensed under the MIT License.\n */\n\n'use strict';\n\nvar copy = require('object-copy');\nvar define = require('define-property');\nvar util = require('util');\n\n/**\n * Returns a function for extending the static properties,\n * prototype properties, and descriptors from the `Parent`\n * constructor onto `Child` constructors.\n *\n * ```js\n * var extend = require('static-extend');\n * Parent.extend = extend(Parent);\n *\n * // optionally pass a custom merge function as the second arg\n * Parent.extend = extend(Parent, function(Child) {\n *   Child.prototype.mixin = function(key, val) {\n *     Child.prototype[key] = val;\n *   };\n * });\n *\n * // extend \"child\" constructors\n * Parent.extend(Child);\n *\n * // optionally define prototype methods as the second arg\n * Parent.extend(Child, {\n *   foo: function() {},\n *   bar: function() {}\n * });\n * ```\n * @param {Function} `Parent` Parent ctor\n * @param {Function} `extendFn` Optional extend function for handling any necessary custom merging. Useful when updating methods that require a specific prototype.\n *   @param {Function} `Child` Child ctor\n *   @param {Object} `proto` Optionally pass additional prototype properties to inherit.\n *   @return {Object}\n * @api public\n */\n\nfunction extend(Parent, extendFn) {\n  if (typeof Parent !== 'function') {\n    throw new TypeError('expected Parent to be a function.');\n  }\n\n  return function(Ctor, proto) {\n    if (typeof Ctor !== 'function') {\n      throw new TypeError('expected Ctor to be a function.');\n    }\n\n    util.inherits(Ctor, Parent);\n    copy(Ctor, Parent);\n\n    // proto can be null or a plain object\n    if (typeof proto === 'object') {\n      var obj = Object.create(proto);\n\n      for (var k in obj) {\n        Ctor.prototype[k] = obj[k];\n      }\n    }\n\n    // keep a reference to the parent prototype\n    define(Ctor.prototype, '_parent_', {\n      configurable: true,\n      set: function() {},\n      get: function() {\n        return Parent.prototype;\n      }\n    });\n\n    if (typeof extendFn === 'function') {\n      extendFn(Ctor, Parent);\n    }\n\n    Ctor.extend = extend(Ctor, extendFn);\n  };\n};\n\n/**\n * Expose `extend`\n */\n\nmodule.exports = extend;\n"]},"metadata":{},"sourceType":"script"}