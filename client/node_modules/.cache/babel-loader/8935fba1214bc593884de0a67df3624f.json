{"ast":null,"code":"import * as actionTypes from \"./actionTypes\";\nimport { returnErrors } from \"./errorActions\";\nimport axios from \"axios\";\nexport const toggleAuthModal = () => {\n  return {\n    type: actionTypes.TOGGLE_AUTH_MODAL\n  };\n}; //* Check token and load user\n\nexport const loadUser = () => (dispatch, getState) => {\n  //* User loading\n  dispatch({\n    type: actionTypes.USER_LOADING\n  });\n  axios.get(\"/api/auth/user\", tokenConfig(getState)).then(res => dispatch({\n    type: actionTypes.USER_LOADED,\n    payload: res.data\n  })).catch(err => {\n    dispatch(returnErrors(err.response.data, err.response.status));\n    dispatch({\n      type: actionTypes.AUTH_ERROR\n    });\n  });\n};\nexport const register = ({\n  name,\n  email,\n  password\n}) => dispatch => {\n  // Headers\n  const config = {\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  }; // Request body\n\n  const body = JSON.stringify({\n    name,\n    email,\n    password\n  });\n  axios.post(\"/api/users/\", body, config).then(res => dispatch({\n    type: actionTypes.REGISTER_SUCCESS,\n    payload: res.data\n  })).catch(err => {\n    dispatch(returnErrors(err.response.data, err.response.status, \"REGISTER_FAIL\"));\n    dispatch({\n      type: actionTypes.REGISTER_FAIL\n    });\n  });\n};\nexport const login = ({\n  email,\n  password\n}, history) => dispatch => {\n  // Headers\n  const config = {\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  }; // Request body\n\n  const body = JSON.stringify({\n    email,\n    password\n  });\n  axios.post(\"/api/auth\", body, config).then(res => {\n    dispatch({\n      type: actionTypes.LOGIN_SUCCESS,\n      payload: res.data\n    });\n  }).catch(err => {\n    console.log(err);\n    dispatch(returnErrors(err.response.data, err.response.status, \"LOGIN_FAIL\"));\n    dispatch({\n      type: actionTypes.LOGIN_FAIL\n    });\n  });\n};\nexport const logOut = () => {\n  return {\n    type: actionTypes.LOGOUT_SUCCESS\n  };\n}; //* Setup config/headers and token\n\nexport const tokenConfig = getState => {\n  //* GET token from localstorage\n  const token = getState().auth.token; //* headers\n\n  const config = {\n    headers: {\n      \"Content-type\": \"application/json\"\n    }\n  };\n\n  if (token) {\n    config.headers[\"x-auth-token\"] = token;\n  }\n\n  return config;\n};\nexport const changeAuthMode = () => {\n  return {\n    type: actionTypes.CHANGE_AUTH_MODE\n  };\n};","map":{"version":3,"sources":["/Users/rachelmcgrath/Desktop/projects/product-shop/client/src/store/actions/authActions.js"],"names":["actionTypes","returnErrors","axios","toggleAuthModal","type","TOGGLE_AUTH_MODAL","loadUser","dispatch","getState","USER_LOADING","get","tokenConfig","then","res","USER_LOADED","payload","data","catch","err","response","status","AUTH_ERROR","register","name","email","password","config","headers","body","JSON","stringify","post","REGISTER_SUCCESS","REGISTER_FAIL","login","history","LOGIN_SUCCESS","console","log","LOGIN_FAIL","logOut","LOGOUT_SUCCESS","token","auth","changeAuthMode","CHANGE_AUTH_MODE"],"mappings":"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","sourcesContent":["import * as actionTypes from \"./actionTypes\";\nimport { returnErrors } from \"./errorActions\";\nimport axios from \"axios\";\n\nexport const toggleAuthModal = () => {\n    return {\n        type: actionTypes.TOGGLE_AUTH_MODAL,\n    };\n};\n\n//* Check token and load user\n\nexport const loadUser = () => (dispatch, getState) => {\n    //* User loading\n    dispatch({\n        type: actionTypes.USER_LOADING,\n    });\n\n    axios\n        .get(\"/api/auth/user\", tokenConfig(getState))\n        .then((res) =>\n            dispatch({\n                type: actionTypes.USER_LOADED,\n                payload: res.data,\n            })\n        )\n        .catch((err) => {\n            dispatch(returnErrors(err.response.data, err.response.status));\n            dispatch({\n                type: actionTypes.AUTH_ERROR,\n            });\n        });\n};\n\nexport const register = ({ name, email, password }) => (dispatch) => {\n    // Headers\n    const config = {\n        headers: {\n            \"Content-Type\": \"application/json\",\n        },\n    };\n    // Request body\n    const body = JSON.stringify({\n        name,\n        email,\n        password,\n    });\n    axios\n        .post(\"/api/users/\", body, config)\n        .then((res) =>\n            dispatch({\n                type: actionTypes.REGISTER_SUCCESS,\n                payload: res.data,\n            })\n        )\n        .catch((err) => {\n            dispatch(returnErrors(err.response.data, err.response.status, \"REGISTER_FAIL\"));\n            dispatch({\n                type: actionTypes.REGISTER_FAIL,\n            });\n        });\n};\n\nexport const login = ({ email, password }, history) => (dispatch) => {\n    // Headers\n    const config = {\n        headers: {\n            \"Content-Type\": \"application/json\",\n        },\n    };\n    // Request body\n    const body = JSON.stringify({\n        email,\n        password,\n    });\n    axios\n        .post(\"/api/auth\", body, config)\n        .then((res) => {\n            dispatch({\n                type: actionTypes.LOGIN_SUCCESS,\n                payload: res.data,\n            });\n        })\n        .catch((err) => {\n            console.log(err);\n            dispatch(returnErrors(err.response.data, err.response.status, \"LOGIN_FAIL\"));\n            dispatch({\n                type: actionTypes.LOGIN_FAIL,\n            });\n        });\n};\n\nexport const logOut = () => {\n    return {\n        type: actionTypes.LOGOUT_SUCCESS,\n    };\n};\n\n//* Setup config/headers and token\nexport const tokenConfig = (getState) => {\n    //* GET token from localstorage\n    const token = getState().auth.token;\n    //* headers\n    const config = {\n        headers: {\n            \"Content-type\": \"application/json\",\n        },\n    };\n    if (token) {\n        config.headers[\"x-auth-token\"] = token;\n    }\n    return config;\n};\n\nexport const changeAuthMode = () => {\n    return {\n        type: actionTypes.CHANGE_AUTH_MODE,\n    };\n};\n"]},"metadata":{},"sourceType":"module"}