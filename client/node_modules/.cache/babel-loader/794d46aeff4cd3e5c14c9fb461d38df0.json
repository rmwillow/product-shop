{"ast":null,"code":"/*!\n * is-accessor-descriptor <https://github.com/jonschlinkert/is-accessor-descriptor>\n *\n * Copyright (c) 2015, Jon Schlinkert.\n * Licensed under the MIT License.\n */\n'use strict';\n\nvar typeOf = require('kind-of'); // accessor descriptor properties\n\n\nvar accessor = {\n  get: 'function',\n  set: 'function',\n  configurable: 'boolean',\n  enumerable: 'boolean'\n};\n\nfunction isAccessorDescriptor(obj, prop) {\n  if (typeof prop === 'string') {\n    var val = Object.getOwnPropertyDescriptor(obj, prop);\n    return typeof val !== 'undefined';\n  }\n\n  if (typeOf(obj) !== 'object') {\n    return false;\n  }\n\n  if (has(obj, 'value') || has(obj, 'writable')) {\n    return false;\n  }\n\n  if (!has(obj, 'get') || typeof obj.get !== 'function') {\n    return false;\n  } // tldr: it's valid to have \"set\" be undefined\n  // \"set\" might be undefined if `Object.getOwnPropertyDescriptor`\n  // was used to get the value, and only `get` was defined by the user\n\n\n  if (has(obj, 'set') && typeof obj[key] !== 'function' && typeof obj[key] !== 'undefined') {\n    return false;\n  }\n\n  for (var key in obj) {\n    if (!accessor.hasOwnProperty(key)) {\n      continue;\n    }\n\n    if (typeOf(obj[key]) === accessor[key]) {\n      continue;\n    }\n\n    if (typeof obj[key] !== 'undefined') {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nfunction has(obj, key) {\n  return {}.hasOwnProperty.call(obj, key);\n}\n/**\n * Expose `isAccessorDescriptor`\n */\n\n\nmodule.exports = isAccessorDescriptor;","map":{"version":3,"sources":["/Users/rachelmcgrath/Desktop/projects/product-shop/client/node_modules/is-accessor-descriptor/index.js"],"names":["typeOf","require","accessor","get","set","configurable","enumerable","isAccessorDescriptor","obj","prop","val","Object","getOwnPropertyDescriptor","has","key","hasOwnProperty","call","module","exports"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA,IAAIA,MAAM,GAAGC,OAAO,CAAC,SAAD,CAApB,C,CAEA;;;AACA,IAAIC,QAAQ,GAAG;AACbC,EAAAA,GAAG,EAAE,UADQ;AAEbC,EAAAA,GAAG,EAAE,UAFQ;AAGbC,EAAAA,YAAY,EAAE,SAHD;AAIbC,EAAAA,UAAU,EAAE;AAJC,CAAf;;AAOA,SAASC,oBAAT,CAA8BC,GAA9B,EAAmCC,IAAnC,EAAyC;AACvC,MAAI,OAAOA,IAAP,KAAgB,QAApB,EAA8B;AAC5B,QAAIC,GAAG,GAAGC,MAAM,CAACC,wBAAP,CAAgCJ,GAAhC,EAAqCC,IAArC,CAAV;AACA,WAAO,OAAOC,GAAP,KAAe,WAAtB;AACD;;AAED,MAAIV,MAAM,CAACQ,GAAD,CAAN,KAAgB,QAApB,EAA8B;AAC5B,WAAO,KAAP;AACD;;AAED,MAAIK,GAAG,CAACL,GAAD,EAAM,OAAN,CAAH,IAAqBK,GAAG,CAACL,GAAD,EAAM,UAAN,CAA5B,EAA+C;AAC7C,WAAO,KAAP;AACD;;AAED,MAAI,CAACK,GAAG,CAACL,GAAD,EAAM,KAAN,CAAJ,IAAoB,OAAOA,GAAG,CAACL,GAAX,KAAmB,UAA3C,EAAuD;AACrD,WAAO,KAAP;AACD,GAhBsC,CAkBvC;AACA;AACA;;;AACA,MAAIU,GAAG,CAACL,GAAD,EAAM,KAAN,CAAH,IAAmB,OAAOA,GAAG,CAACM,GAAD,CAAV,KAAoB,UAAvC,IAAqD,OAAON,GAAG,CAACM,GAAD,CAAV,KAAoB,WAA7E,EAA0F;AACxF,WAAO,KAAP;AACD;;AAED,OAAK,IAAIA,GAAT,IAAgBN,GAAhB,EAAqB;AACnB,QAAI,CAACN,QAAQ,CAACa,cAAT,CAAwBD,GAAxB,CAAL,EAAmC;AACjC;AACD;;AAED,QAAId,MAAM,CAACQ,GAAG,CAACM,GAAD,CAAJ,CAAN,KAAqBZ,QAAQ,CAACY,GAAD,CAAjC,EAAwC;AACtC;AACD;;AAED,QAAI,OAAON,GAAG,CAACM,GAAD,CAAV,KAAoB,WAAxB,EAAqC;AACnC,aAAO,KAAP;AACD;AACF;;AACD,SAAO,IAAP;AACD;;AAED,SAASD,GAAT,CAAaL,GAAb,EAAkBM,GAAlB,EAAuB;AACrB,SAAO,GAAGC,cAAH,CAAkBC,IAAlB,CAAuBR,GAAvB,EAA4BM,GAA5B,CAAP;AACD;AAED;AACA;AACA;;;AAEAG,MAAM,CAACC,OAAP,GAAiBX,oBAAjB","sourcesContent":["/*!\n * is-accessor-descriptor <https://github.com/jonschlinkert/is-accessor-descriptor>\n *\n * Copyright (c) 2015, Jon Schlinkert.\n * Licensed under the MIT License.\n */\n\n'use strict';\n\nvar typeOf = require('kind-of');\n\n// accessor descriptor properties\nvar accessor = {\n  get: 'function',\n  set: 'function',\n  configurable: 'boolean',\n  enumerable: 'boolean'\n};\n\nfunction isAccessorDescriptor(obj, prop) {\n  if (typeof prop === 'string') {\n    var val = Object.getOwnPropertyDescriptor(obj, prop);\n    return typeof val !== 'undefined';\n  }\n\n  if (typeOf(obj) !== 'object') {\n    return false;\n  }\n\n  if (has(obj, 'value') || has(obj, 'writable')) {\n    return false;\n  }\n\n  if (!has(obj, 'get') || typeof obj.get !== 'function') {\n    return false;\n  }\n\n  // tldr: it's valid to have \"set\" be undefined\n  // \"set\" might be undefined if `Object.getOwnPropertyDescriptor`\n  // was used to get the value, and only `get` was defined by the user\n  if (has(obj, 'set') && typeof obj[key] !== 'function' && typeof obj[key] !== 'undefined') {\n    return false;\n  }\n\n  for (var key in obj) {\n    if (!accessor.hasOwnProperty(key)) {\n      continue;\n    }\n\n    if (typeOf(obj[key]) === accessor[key]) {\n      continue;\n    }\n\n    if (typeof obj[key] !== 'undefined') {\n      return false;\n    }\n  }\n  return true;\n}\n\nfunction has(obj, key) {\n  return {}.hasOwnProperty.call(obj, key);\n}\n\n/**\n * Expose `isAccessorDescriptor`\n */\n\nmodule.exports = isAccessorDescriptor;\n"]},"metadata":{},"sourceType":"script"}