{"ast":null,"code":"/*!\n * assign-symbols <https://github.com/jonschlinkert/assign-symbols>\n *\n * Copyright (c) 2015, Jon Schlinkert.\n * Licensed under the MIT License.\n */\n'use strict';\n\nmodule.exports = function (receiver, objects) {\n  if (receiver === null || typeof receiver === 'undefined') {\n    throw new TypeError('expected first argument to be an object.');\n  }\n\n  if (typeof objects === 'undefined' || typeof Symbol === 'undefined') {\n    return receiver;\n  }\n\n  if (typeof Object.getOwnPropertySymbols !== 'function') {\n    return receiver;\n  }\n\n  var isEnumerable = Object.prototype.propertyIsEnumerable;\n  var target = Object(receiver);\n  var len = arguments.length,\n      i = 0;\n\n  while (++i < len) {\n    var provider = Object(arguments[i]);\n    var names = Object.getOwnPropertySymbols(provider);\n\n    for (var j = 0; j < names.length; j++) {\n      var key = names[j];\n\n      if (isEnumerable.call(provider, key)) {\n        target[key] = provider[key];\n      }\n    }\n  }\n\n  return target;\n};","map":{"version":3,"sources":["/Users/rachelmcgrath/Desktop/projects/product-shop/client/node_modules/assign-symbols/index.js"],"names":["module","exports","receiver","objects","TypeError","Symbol","Object","getOwnPropertySymbols","isEnumerable","prototype","propertyIsEnumerable","target","len","arguments","length","i","provider","names","j","key","call"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEAA,MAAM,CAACC,OAAP,GAAiB,UAASC,QAAT,EAAmBC,OAAnB,EAA4B;AAC3C,MAAID,QAAQ,KAAK,IAAb,IAAqB,OAAOA,QAAP,KAAoB,WAA7C,EAA0D;AACxD,UAAM,IAAIE,SAAJ,CAAc,0CAAd,CAAN;AACD;;AAED,MAAI,OAAOD,OAAP,KAAmB,WAAnB,IAAkC,OAAOE,MAAP,KAAkB,WAAxD,EAAqE;AACnE,WAAOH,QAAP;AACD;;AAED,MAAI,OAAOI,MAAM,CAACC,qBAAd,KAAwC,UAA5C,EAAwD;AACtD,WAAOL,QAAP;AACD;;AAED,MAAIM,YAAY,GAAGF,MAAM,CAACG,SAAP,CAAiBC,oBAApC;AACA,MAAIC,MAAM,GAAGL,MAAM,CAACJ,QAAD,CAAnB;AACA,MAAIU,GAAG,GAAGC,SAAS,CAACC,MAApB;AAAA,MAA4BC,CAAC,GAAG,CAAhC;;AAEA,SAAO,EAAEA,CAAF,GAAMH,GAAb,EAAkB;AAChB,QAAII,QAAQ,GAAGV,MAAM,CAACO,SAAS,CAACE,CAAD,CAAV,CAArB;AACA,QAAIE,KAAK,GAAGX,MAAM,CAACC,qBAAP,CAA6BS,QAA7B,CAAZ;;AAEA,SAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,KAAK,CAACH,MAA1B,EAAkCI,CAAC,EAAnC,EAAuC;AACrC,UAAIC,GAAG,GAAGF,KAAK,CAACC,CAAD,CAAf;;AAEA,UAAIV,YAAY,CAACY,IAAb,CAAkBJ,QAAlB,EAA4BG,GAA5B,CAAJ,EAAsC;AACpCR,QAAAA,MAAM,CAACQ,GAAD,CAAN,GAAcH,QAAQ,CAACG,GAAD,CAAtB;AACD;AACF;AACF;;AACD,SAAOR,MAAP;AACD,CA9BD","sourcesContent":["/*!\n * assign-symbols <https://github.com/jonschlinkert/assign-symbols>\n *\n * Copyright (c) 2015, Jon Schlinkert.\n * Licensed under the MIT License.\n */\n\n'use strict';\n\nmodule.exports = function(receiver, objects) {\n  if (receiver === null || typeof receiver === 'undefined') {\n    throw new TypeError('expected first argument to be an object.');\n  }\n\n  if (typeof objects === 'undefined' || typeof Symbol === 'undefined') {\n    return receiver;\n  }\n\n  if (typeof Object.getOwnPropertySymbols !== 'function') {\n    return receiver;\n  }\n\n  var isEnumerable = Object.prototype.propertyIsEnumerable;\n  var target = Object(receiver);\n  var len = arguments.length, i = 0;\n\n  while (++i < len) {\n    var provider = Object(arguments[i]);\n    var names = Object.getOwnPropertySymbols(provider);\n\n    for (var j = 0; j < names.length; j++) {\n      var key = names[j];\n\n      if (isEnumerable.call(provider, key)) {\n        target[key] = provider[key];\n      }\n    }\n  }\n  return target;\n};\n"]},"metadata":{},"sourceType":"script"}