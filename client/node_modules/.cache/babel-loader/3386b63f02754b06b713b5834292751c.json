{"ast":null,"code":"import*as actionTypes from\"./actionTypes\";import{returnErrors}from\"./errorActions\";import axios from\"axios\";export var toggleAuthModal=function toggleAuthModal(){return{type:actionTypes.TOGGLE_AUTH_MODAL};};//* Check token and load user\nexport var loadUser=function loadUser(){return function(dispatch,getState){//* User loading\ndispatch({type:actionTypes.USER_LOADING});axios.get(\"/api/auth/user\",tokenConfig(getState)).then(function(res){return dispatch({type:actionTypes.USER_LOADED,payload:res.data});}).catch(function(err){dispatch(returnErrors(err.response.data,err.response.status));dispatch({type:actionTypes.AUTH_ERROR});});};};export var register=function register(_ref){var name=_ref.name,email=_ref.email,password=_ref.password;return function(dispatch){// Headers\nvar config={headers:{\"Content-Type\":\"application/json\"}};// Request body\nvar body=JSON.stringify({name:name,email:email,password:password});axios.post(\"/api/users/\",body,config).then(function(res){return dispatch({type:actionTypes.REGISTER_SUCCESS,payload:res.data});}).catch(function(err){dispatch(returnErrors(err.response.data,err.response.status,\"REGISTER_FAIL\"));dispatch({type:actionTypes.REGISTER_FAIL});});};};export var login=function login(_ref2,history){var email=_ref2.email,password=_ref2.password;return function(dispatch){// Headers\nvar config={headers:{\"Content-Type\":\"application/json\"}};// Request body\nvar body=JSON.stringify({email:email,password:password});axios.post(\"/api/auth\",body,config).then(function(res){dispatch({type:actionTypes.LOGIN_SUCCESS,payload:res.data});}).catch(function(err){console.log(err);dispatch(returnErrors(err.response.data,err.response.status,\"LOGIN_FAIL\"));dispatch({type:actionTypes.LOGIN_FAIL});});};};export var logOut=function logOut(){return{type:actionTypes.LOGOUT_SUCCESS};};//* Setup config/headers and token\nexport var tokenConfig=function tokenConfig(getState){//* GET token from localstorage\nvar token=getState().auth.token;//* headers\nvar config={headers:{\"Content-type\":\"application/json\"}};if(token){config.headers[\"x-auth-token\"]=token;}return config;};export var changeAuthMode=function changeAuthMode(){return{type:actionTypes.CHANGE_AUTH_MODE};};","map":{"version":3,"sources":["/Users/rachelmcgrath/Desktop/projects/product-shop/client/src/store/actions/authActions.js"],"names":["actionTypes","returnErrors","axios","toggleAuthModal","type","TOGGLE_AUTH_MODAL","loadUser","dispatch","getState","USER_LOADING","get","tokenConfig","then","res","USER_LOADED","payload","data","catch","err","response","status","AUTH_ERROR","register","name","email","password","config","headers","body","JSON","stringify","post","REGISTER_SUCCESS","REGISTER_FAIL","login","history","LOGIN_SUCCESS","console","log","LOGIN_FAIL","logOut","LOGOUT_SUCCESS","token","auth","changeAuthMode","CHANGE_AUTH_MODE"],"mappings":"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","sourcesContent":["import * as actionTypes from \"./actionTypes\";\nimport { returnErrors } from \"./errorActions\";\nimport axios from \"axios\";\n\nexport const toggleAuthModal = () => {\n    return {\n        type: actionTypes.TOGGLE_AUTH_MODAL,\n    };\n};\n\n//* Check token and load user\n\nexport const loadUser = () => (dispatch, getState) => {\n    //* User loading\n    dispatch({\n        type: actionTypes.USER_LOADING,\n    });\n\n    axios\n        .get(\"/api/auth/user\", tokenConfig(getState))\n        .then((res) =>\n            dispatch({\n                type: actionTypes.USER_LOADED,\n                payload: res.data,\n            })\n        )\n        .catch((err) => {\n            dispatch(returnErrors(err.response.data, err.response.status));\n            dispatch({\n                type: actionTypes.AUTH_ERROR,\n            });\n        });\n};\n\nexport const register = ({ name, email, password }) => (dispatch) => {\n    // Headers\n    const config = {\n        headers: {\n            \"Content-Type\": \"application/json\",\n        },\n    };\n    // Request body\n    const body = JSON.stringify({\n        name,\n        email,\n        password,\n    });\n    axios\n        .post(\"/api/users/\", body, config)\n        .then((res) =>\n            dispatch({\n                type: actionTypes.REGISTER_SUCCESS,\n                payload: res.data,\n            })\n        )\n        .catch((err) => {\n            dispatch(returnErrors(err.response.data, err.response.status, \"REGISTER_FAIL\"));\n            dispatch({\n                type: actionTypes.REGISTER_FAIL,\n            });\n        });\n};\n\nexport const login = ({ email, password }, history) => (dispatch) => {\n    // Headers\n    const config = {\n        headers: {\n            \"Content-Type\": \"application/json\",\n        },\n    };\n    // Request body\n    const body = JSON.stringify({\n        email,\n        password,\n    });\n    axios\n        .post(\"/api/auth\", body, config)\n        .then((res) => {\n            dispatch({\n                type: actionTypes.LOGIN_SUCCESS,\n                payload: res.data,\n            });\n        })\n        .catch((err) => {\n            console.log(err);\n            dispatch(returnErrors(err.response.data, err.response.status, \"LOGIN_FAIL\"));\n            dispatch({\n                type: actionTypes.LOGIN_FAIL,\n            });\n        });\n};\n\nexport const logOut = () => {\n    return {\n        type: actionTypes.LOGOUT_SUCCESS,\n    };\n};\n\n//* Setup config/headers and token\nexport const tokenConfig = (getState) => {\n    //* GET token from localstorage\n    const token = getState().auth.token;\n    //* headers\n    const config = {\n        headers: {\n            \"Content-type\": \"application/json\",\n        },\n    };\n    if (token) {\n        config.headers[\"x-auth-token\"] = token;\n    }\n    return config;\n};\n\nexport const changeAuthMode = () => {\n    return {\n        type: actionTypes.CHANGE_AUTH_MODE,\n    };\n};\n"]},"metadata":{},"sourceType":"module"}