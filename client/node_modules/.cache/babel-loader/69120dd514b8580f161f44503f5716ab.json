{"ast":null,"code":"'use strict';\n\nvar posix = require('posix-character-classes');\n\nmodule.exports = function (brackets) {\n  brackets.compiler\n  /**\n   * Escaped characters\n   */\n  .set('escape', function (node) {\n    return this.emit('\\\\' + node.val.replace(/^\\\\/, ''), node);\n  })\n  /**\n   * Text\n   */\n  .set('text', function (node) {\n    return this.emit(node.val.replace(/([{}])/g, '\\\\$1'), node);\n  })\n  /**\n   * POSIX character classes\n   */\n  .set('posix', function (node) {\n    if (node.val === '[::]') {\n      return this.emit('\\\\[::\\\\]', node);\n    }\n\n    var val = posix[node.inner];\n\n    if (typeof val === 'undefined') {\n      val = '[' + node.inner + ']';\n    }\n\n    return this.emit(val, node);\n  })\n  /**\n   * Non-posix brackets\n   */\n  .set('bracket', function (node) {\n    return this.mapVisit(node.nodes);\n  }).set('bracket.open', function (node) {\n    return this.emit(node.val, node);\n  }).set('bracket.inner', function (node) {\n    var inner = node.val;\n\n    if (inner === '[' || inner === ']') {\n      return this.emit('\\\\' + node.val, node);\n    }\n\n    if (inner === '^]') {\n      return this.emit('^\\\\]', node);\n    }\n\n    if (inner === '^') {\n      return this.emit('^', node);\n    }\n\n    if (/-/.test(inner) && !/(\\d-\\d|\\w-\\w)/.test(inner)) {\n      inner = inner.split('-').join('\\\\-');\n    }\n\n    var isNegated = inner.charAt(0) === '^'; // add slashes to negated brackets, per spec\n\n    if (isNegated && inner.indexOf('/') === -1) {\n      inner += '/';\n    }\n\n    if (isNegated && inner.indexOf('.') === -1) {\n      inner += '.';\n    } // don't unescape `0` (octal literal)\n\n\n    inner = inner.replace(/\\\\([1-9])/g, '$1');\n    return this.emit(inner, node);\n  }).set('bracket.close', function (node) {\n    var val = node.val.replace(/^\\\\/, '');\n\n    if (node.parent.escaped === true) {\n      return this.emit('\\\\' + val, node);\n    }\n\n    return this.emit(val, node);\n  });\n};","map":{"version":3,"sources":["/Users/rachelmcgrath/Desktop/projects/product-shop/client/node_modules/expand-brackets/lib/compilers.js"],"names":["posix","require","module","exports","brackets","compiler","set","node","emit","val","replace","inner","mapVisit","nodes","test","split","join","isNegated","charAt","indexOf","parent","escaped"],"mappings":"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","sourcesContent":["'use strict';\n\nvar posix = require('posix-character-classes');\n\nmodule.exports = function(brackets) {\n  brackets.compiler\n\n    /**\n     * Escaped characters\n     */\n\n    .set('escape', function(node) {\n      return this.emit('\\\\' + node.val.replace(/^\\\\/, ''), node);\n    })\n\n    /**\n     * Text\n     */\n\n    .set('text', function(node) {\n      return this.emit(node.val.replace(/([{}])/g, '\\\\$1'), node);\n    })\n\n    /**\n     * POSIX character classes\n     */\n\n    .set('posix', function(node) {\n      if (node.val === '[::]') {\n        return this.emit('\\\\[::\\\\]', node);\n      }\n\n      var val = posix[node.inner];\n      if (typeof val === 'undefined') {\n        val = '[' + node.inner + ']';\n      }\n      return this.emit(val, node);\n    })\n\n    /**\n     * Non-posix brackets\n     */\n\n    .set('bracket', function(node) {\n      return this.mapVisit(node.nodes);\n    })\n    .set('bracket.open', function(node) {\n      return this.emit(node.val, node);\n    })\n    .set('bracket.inner', function(node) {\n      var inner = node.val;\n\n      if (inner === '[' || inner === ']') {\n        return this.emit('\\\\' + node.val, node);\n      }\n      if (inner === '^]') {\n        return this.emit('^\\\\]', node);\n      }\n      if (inner === '^') {\n        return this.emit('^', node);\n      }\n\n      if (/-/.test(inner) && !/(\\d-\\d|\\w-\\w)/.test(inner)) {\n        inner = inner.split('-').join('\\\\-');\n      }\n\n      var isNegated = inner.charAt(0) === '^';\n      // add slashes to negated brackets, per spec\n      if (isNegated && inner.indexOf('/') === -1) {\n        inner += '/';\n      }\n      if (isNegated && inner.indexOf('.') === -1) {\n        inner += '.';\n      }\n\n      // don't unescape `0` (octal literal)\n      inner = inner.replace(/\\\\([1-9])/g, '$1');\n      return this.emit(inner, node);\n    })\n    .set('bracket.close', function(node) {\n      var val = node.val.replace(/^\\\\/, '');\n      if (node.parent.escaped === true) {\n        return this.emit('\\\\' + val, node);\n      }\n      return this.emit(val, node);\n    });\n};\n"]},"metadata":{},"sourceType":"script"}