{"ast":null,"code":"'use strict';\n\nvar fs = require('fs');\n\nvar path = require('path');\n\nvar define = require('define-property');\n\nvar utils = require('./utils');\n/**\n * Expose `mixin()`.\n * This code is based on `source-maps-support.js` in reworkcss/css\n * https://github.com/reworkcss/css/blob/master/lib/stringify/source-map-support.js\n * Copyright (c) 2012 TJ Holowaychuk <tj@vision-media.ca>\n */\n\n\nmodule.exports = mixin;\n/**\n * Mixin source map support into `compiler`.\n *\n * @param {Object} `compiler`\n * @api public\n */\n\nfunction mixin(compiler) {\n  define(compiler, '_comment', compiler.comment);\n  compiler.map = new utils.SourceMap.SourceMapGenerator();\n  compiler.position = {\n    line: 1,\n    column: 1\n  };\n  compiler.content = {};\n  compiler.files = {};\n\n  for (var key in exports) {\n    define(compiler, key, exports[key]);\n  }\n}\n/**\n * Update position.\n *\n * @param {String} str\n */\n\n\nexports.updatePosition = function (str) {\n  var lines = str.match(/\\n/g);\n  if (lines) this.position.line += lines.length;\n  var i = str.lastIndexOf('\\n');\n  this.position.column = ~i ? str.length - i : this.position.column + str.length;\n};\n/**\n * Emit `str` with `position`.\n *\n * @param {String} str\n * @param {Object} [pos]\n * @return {String}\n */\n\n\nexports.emit = function (str, node) {\n  var position = node.position || {};\n  var source = position.source;\n\n  if (source) {\n    if (position.filepath) {\n      source = utils.unixify(position.filepath);\n    }\n\n    this.map.addMapping({\n      source: source,\n      generated: {\n        line: this.position.line,\n        column: Math.max(this.position.column - 1, 0)\n      },\n      original: {\n        line: position.start.line,\n        column: position.start.column - 1\n      }\n    });\n\n    if (position.content) {\n      this.addContent(source, position);\n    }\n\n    if (position.filepath) {\n      this.addFile(source, position);\n    }\n\n    this.updatePosition(str);\n    this.output += str;\n  }\n\n  return str;\n};\n/**\n * Adds a file to the source map output if it has not already been added\n * @param {String} `file`\n * @param {Object} `pos`\n */\n\n\nexports.addFile = function (file, position) {\n  if (typeof position.content !== 'string') return;\n  if (Object.prototype.hasOwnProperty.call(this.files, file)) return;\n  this.files[file] = position.content;\n};\n/**\n * Adds a content source to the source map output if it has not already been added\n * @param {String} `source`\n * @param {Object} `position`\n */\n\n\nexports.addContent = function (source, position) {\n  if (typeof position.content !== 'string') return;\n  if (Object.prototype.hasOwnProperty.call(this.content, source)) return;\n  this.map.setSourceContent(source, position.content);\n};\n/**\n * Applies any original source maps to the output and embeds the source file\n * contents in the source map.\n */\n\n\nexports.applySourceMaps = function () {\n  Object.keys(this.files).forEach(function (file) {\n    var content = this.files[file];\n    this.map.setSourceContent(file, content);\n\n    if (this.options.inputSourcemaps === true) {\n      var originalMap = utils.sourceMapResolve.resolveSync(content, file, fs.readFileSync);\n\n      if (originalMap) {\n        var map = new utils.SourceMap.SourceMapConsumer(originalMap.map);\n        var relativeTo = originalMap.sourcesRelativeTo;\n        this.map.applySourceMap(map, file, utils.unixify(path.dirname(relativeTo)));\n      }\n    }\n  }, this);\n};\n/**\n * Process comments, drops sourceMap comments.\n * @param {Object} node\n */\n\n\nexports.comment = function (node) {\n  if (/^# sourceMappingURL=/.test(node.comment)) {\n    return this.emit('', node.position);\n  }\n\n  return this._comment(node);\n};","map":{"version":3,"sources":["/Users/rachelmcgrath/Desktop/projects/product-shop/client/node_modules/snapdragon/lib/source-maps.js"],"names":["fs","require","path","define","utils","module","exports","mixin","compiler","comment","map","SourceMap","SourceMapGenerator","position","line","column","content","files","key","updatePosition","str","lines","match","length","i","lastIndexOf","emit","node","source","filepath","unixify","addMapping","generated","Math","max","original","start","addContent","addFile","output","file","Object","prototype","hasOwnProperty","call","setSourceContent","applySourceMaps","keys","forEach","options","inputSourcemaps","originalMap","sourceMapResolve","resolveSync","readFileSync","SourceMapConsumer","relativeTo","sourcesRelativeTo","applySourceMap","dirname","test","_comment"],"mappings":"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","sourcesContent":["'use strict';\n\nvar fs = require('fs');\nvar path = require('path');\nvar define = require('define-property');\nvar utils = require('./utils');\n\n/**\n * Expose `mixin()`.\n * This code is based on `source-maps-support.js` in reworkcss/css\n * https://github.com/reworkcss/css/blob/master/lib/stringify/source-map-support.js\n * Copyright (c) 2012 TJ Holowaychuk <tj@vision-media.ca>\n */\n\nmodule.exports = mixin;\n\n/**\n * Mixin source map support into `compiler`.\n *\n * @param {Object} `compiler`\n * @api public\n */\n\nfunction mixin(compiler) {\n  define(compiler, '_comment', compiler.comment);\n  compiler.map = new utils.SourceMap.SourceMapGenerator();\n  compiler.position = { line: 1, column: 1 };\n  compiler.content = {};\n  compiler.files = {};\n\n  for (var key in exports) {\n    define(compiler, key, exports[key]);\n  }\n}\n\n/**\n * Update position.\n *\n * @param {String} str\n */\n\nexports.updatePosition = function(str) {\n  var lines = str.match(/\\n/g);\n  if (lines) this.position.line += lines.length;\n  var i = str.lastIndexOf('\\n');\n  this.position.column = ~i ? str.length - i : this.position.column + str.length;\n};\n\n/**\n * Emit `str` with `position`.\n *\n * @param {String} str\n * @param {Object} [pos]\n * @return {String}\n */\n\nexports.emit = function(str, node) {\n  var position = node.position || {};\n  var source = position.source;\n  if (source) {\n    if (position.filepath) {\n      source = utils.unixify(position.filepath);\n    }\n\n    this.map.addMapping({\n      source: source,\n      generated: {\n        line: this.position.line,\n        column: Math.max(this.position.column - 1, 0)\n      },\n      original: {\n        line: position.start.line,\n        column: position.start.column - 1\n      }\n    });\n\n    if (position.content) {\n      this.addContent(source, position);\n    }\n    if (position.filepath) {\n      this.addFile(source, position);\n    }\n\n    this.updatePosition(str);\n    this.output += str;\n  }\n  return str;\n};\n\n/**\n * Adds a file to the source map output if it has not already been added\n * @param {String} `file`\n * @param {Object} `pos`\n */\n\nexports.addFile = function(file, position) {\n  if (typeof position.content !== 'string') return;\n  if (Object.prototype.hasOwnProperty.call(this.files, file)) return;\n  this.files[file] = position.content;\n};\n\n/**\n * Adds a content source to the source map output if it has not already been added\n * @param {String} `source`\n * @param {Object} `position`\n */\n\nexports.addContent = function(source, position) {\n  if (typeof position.content !== 'string') return;\n  if (Object.prototype.hasOwnProperty.call(this.content, source)) return;\n  this.map.setSourceContent(source, position.content);\n};\n\n/**\n * Applies any original source maps to the output and embeds the source file\n * contents in the source map.\n */\n\nexports.applySourceMaps = function() {\n  Object.keys(this.files).forEach(function(file) {\n    var content = this.files[file];\n    this.map.setSourceContent(file, content);\n\n    if (this.options.inputSourcemaps === true) {\n      var originalMap = utils.sourceMapResolve.resolveSync(content, file, fs.readFileSync);\n      if (originalMap) {\n        var map = new utils.SourceMap.SourceMapConsumer(originalMap.map);\n        var relativeTo = originalMap.sourcesRelativeTo;\n        this.map.applySourceMap(map, file, utils.unixify(path.dirname(relativeTo)));\n      }\n    }\n  }, this);\n};\n\n/**\n * Process comments, drops sourceMap comments.\n * @param {Object} node\n */\n\nexports.comment = function(node) {\n  if (/^# sourceMappingURL=/.test(node.comment)) {\n    return this.emit('', node.position);\n  }\n  return this._comment(node);\n};\n"]},"metadata":{},"sourceType":"script"}