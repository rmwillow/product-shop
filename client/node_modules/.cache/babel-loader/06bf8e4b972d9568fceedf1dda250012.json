{"ast":null,"code":"var _jsxFileName = \"/Users/rachelmcgrath/Desktop/projects/product-shop/client/src/components/OrderForm/OrderForm.js\";\nimport React from \"react\";\nimport { TextField, Button, Typography } from \"@material-ui/core\";\nimport { connect } from \"react-redux\";\nimport { submitOrder, submitForm } from \"../../store/actions/orderActions\";\nimport ChevronLeftIcon from \"@material-ui/icons/ChevronLeft\";\nimport * as yup from \"yup\";\nimport { Formik, Form, useField } from \"formik\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nconst useStyles = makeStyles(theme => ({\n  root: {\n    marginBottom: \"1rem\",\n    width: \"100%\",\n    \"& label.Mui-focused\": {\n      color: \"grey\"\n    },\n    \"& .MuiInput-underline:after\": {\n      borderBottomColor: \"red\"\n    },\n    \"& .MuiOutlinedInput-root\": {\n      \"& fieldset\": {\n        borderColor: \"black\",\n        borderWidth: \"3px\"\n      },\n      \"&:hover fieldset\": {\n        borderColor: \"grey\"\n      },\n      \"&.Mui-focused fieldset\": {\n        borderColor: \"black\"\n      }\n    }\n  },\n  submitModel: {\n    backgroundColor: \"white\",\n    width: \"100%\",\n    padding: \"2rem\",\n    height: \"90%\",\n    borderTopLeftRadius: \"1rem\",\n    borderTopRightRadius: \"1rem\"\n  }\n}));\nconst validationSchema = yup.object({\n  name: yup.string().required(),\n  email: yup.string().email(\"Enter a valid Email :)\").required(),\n  address: yup.string().required(\"A valid address is required\"),\n  phone: yup.string().min(7, \"should atlest be 7 digits\").required(),\n  pin: yup.string().min(7, \"should atlest be 7 digits\").required()\n});\n\nconst CustomField = ({\n  label,\n  type,\n  variant,\n  ...props\n}) => {\n  const [field, meta] = useField(props);\n  const errorText = meta.error && meta.touched ? meta.error : \"\";\n  const classes = useStyles();\n  return /*#__PURE__*/React.createElement(TextField, Object.assign({\n    className: classes.root,\n    variant: variant,\n    label: label\n  }, field, {\n    helperText: errorText,\n    error: !!errorText,\n    type: type,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 9\n    }\n  }));\n};\n\nfunction OrderForm(props) {\n  const submit = (name, email, phone, address, pin) => {\n    let ids = [];\n\n    for (let i = 0; i < props.cart.length; i++) {\n      ids.push(props.cart[i]._id);\n    }\n\n    const order = {\n      products: ids,\n      name: name,\n      sizes: props.sizes,\n      phone: phone,\n      address: address,\n      pin: pin,\n      email: email\n    };\n    console.log(order);\n    props.submitOrder(order);\n  };\n\n  const classes = useStyles();\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.submitModel,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    variant: \"h3\",\n    style: {\n      textAlign: \"center\",\n      fontSize: \"4rem\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 13\n    }\n  }, \"Just some details\"), /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      textAlign: \"center\",\n      marginBottom: \"1.3rem\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    variant: \"p\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 17\n    }\n  }, \"Some details to deliver your Order at the right place\")), /*#__PURE__*/React.createElement(Formik, {\n    initialValues: {\n      name: \"\",\n      email: \"\",\n      phone: \"\",\n      address: \"\",\n      pin: \"\"\n    },\n    onSubmit: (data, {\n      setSubmitting\n    }) => {\n      setSubmitting(true); //! make async call here!!!!\n\n      submit(data.name, data.email, data.phone, data.address, data.pin);\n      setSubmitting(false);\n    },\n    validationSchema: validationSchema,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 13\n    }\n  }, ({\n    values,\n    errors,\n    isSubmitting\n  }) => /*#__PURE__*/React.createElement(Form, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(CustomField, {\n    label: \"Name\",\n    variant: \"outlined\",\n    name: \"name\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 29\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(CustomField, {\n    label: \"Email\",\n    variant: \"outlined\",\n    name: \"email\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 29\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(CustomField, {\n    label: \"Phone\",\n    variant: \"outlined\",\n    name: \"phone\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 29\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(CustomField, {\n    label: \"Address\",\n    variant: \"outlined\",\n    name: \"address\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 29\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(CustomField, {\n    label: \"Pin\",\n    variant: \"outlined\",\n    name: \"pin\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 29\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      textAlign: \"center\",\n      width: \"100%\",\n      marginBottom: \"1rem\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    disabled: isSubmitting,\n    style: {\n      color: \"white\",\n      backgroundColor: \"black\",\n      width: \"100%\"\n    },\n    type: \"submit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 29\n    }\n  }, \"Place Order\")))), /*#__PURE__*/React.createElement(Button, {\n    onClick: () => props.submitForm(),\n    style: {\n      color: \"white\",\n      backgroundColor: \"black\",\n      width: \"100%\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(ChevronLeftIcon, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 17\n    }\n  }), \"Go back\"));\n}\n\nconst mapStateToProps = state => {\n  return {\n    cart: state.orders.cart,\n    sizes: state.orders.sizes\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    submitOrder: order => dispatch(submitOrder(order)),\n    submitForm: () => dispatch(submitForm())\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(OrderForm);","map":{"version":3,"sources":["/Users/rachelmcgrath/Desktop/projects/product-shop/client/src/components/OrderForm/OrderForm.js"],"names":["React","TextField","Button","Typography","connect","submitOrder","submitForm","ChevronLeftIcon","yup","Formik","Form","useField","makeStyles","useStyles","theme","root","marginBottom","width","color","borderBottomColor","borderColor","borderWidth","submitModel","backgroundColor","padding","height","borderTopLeftRadius","borderTopRightRadius","validationSchema","object","name","string","required","email","address","phone","min","pin","CustomField","label","type","variant","props","field","meta","errorText","error","touched","classes","OrderForm","submit","ids","i","cart","length","push","_id","order","products","sizes","console","log","textAlign","fontSize","data","setSubmitting","values","errors","isSubmitting","mapStateToProps","state","orders","mapDispatchToProps","dispatch"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,SAAT,EAAoBC,MAApB,EAA4BC,UAA5B,QAA8C,mBAA9C;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,WAAT,EAAsBC,UAAtB,QAAwC,kCAAxC;AACA,OAAOC,eAAP,MAA4B,gCAA5B;AACA,OAAO,KAAKC,GAAZ,MAAqB,KAArB;AACA,SAASC,MAAT,EAAiBC,IAAjB,EAAuBC,QAAvB,QAAuC,QAAvC;AACA,SAASC,UAAT,QAA2B,0BAA3B;AAEA,MAAMC,SAAS,GAAGD,UAAU,CAAEE,KAAD,KAAY;AACrCC,EAAAA,IAAI,EAAE;AACFC,IAAAA,YAAY,EAAE,MADZ;AAEFC,IAAAA,KAAK,EAAE,MAFL;AAGF,2BAAuB;AACnBC,MAAAA,KAAK,EAAE;AADY,KAHrB;AAMF,mCAA+B;AAC3BC,MAAAA,iBAAiB,EAAE;AADQ,KAN7B;AASF,gCAA4B;AACxB,oBAAc;AACVC,QAAAA,WAAW,EAAE,OADH;AAEVC,QAAAA,WAAW,EAAE;AAFH,OADU;AAKxB,0BAAoB;AAChBD,QAAAA,WAAW,EAAE;AADG,OALI;AAQxB,gCAA0B;AACtBA,QAAAA,WAAW,EAAE;AADS;AARF;AAT1B,GAD+B;AAuBrCE,EAAAA,WAAW,EAAE;AACTC,IAAAA,eAAe,EAAE,OADR;AAETN,IAAAA,KAAK,EAAE,MAFE;AAGTO,IAAAA,OAAO,EAAE,MAHA;AAITC,IAAAA,MAAM,EAAE,KAJC;AAKTC,IAAAA,mBAAmB,EAAE,MALZ;AAMTC,IAAAA,oBAAoB,EAAE;AANb;AAvBwB,CAAZ,CAAD,CAA5B;AAgCA,MAAMC,gBAAgB,GAAGpB,GAAG,CAACqB,MAAJ,CAAW;AAChCC,EAAAA,IAAI,EAAEtB,GAAG,CAACuB,MAAJ,GAAaC,QAAb,EAD0B;AAEhCC,EAAAA,KAAK,EAAEzB,GAAG,CAACuB,MAAJ,GAAaE,KAAb,CAAmB,wBAAnB,EAA6CD,QAA7C,EAFyB;AAGhCE,EAAAA,OAAO,EAAE1B,GAAG,CAACuB,MAAJ,GAAaC,QAAb,CAAsB,6BAAtB,CAHuB;AAIhCG,EAAAA,KAAK,EAAE3B,GAAG,CAACuB,MAAJ,GAAaK,GAAb,CAAiB,CAAjB,EAAoB,2BAApB,EAAiDJ,QAAjD,EAJyB;AAKhCK,EAAAA,GAAG,EAAE7B,GAAG,CAACuB,MAAJ,GAAaK,GAAb,CAAiB,CAAjB,EAAoB,2BAApB,EAAiDJ,QAAjD;AAL2B,CAAX,CAAzB;;AAQA,MAAMM,WAAW,GAAG,CAAC;AAAEC,EAAAA,KAAF;AAASC,EAAAA,IAAT;AAAeC,EAAAA,OAAf;AAAwB,KAAGC;AAA3B,CAAD,KAAwC;AACxD,QAAM,CAACC,KAAD,EAAQC,IAAR,IAAgBjC,QAAQ,CAAC+B,KAAD,CAA9B;AACA,QAAMG,SAAS,GAAGD,IAAI,CAACE,KAAL,IAAcF,IAAI,CAACG,OAAnB,GAA6BH,IAAI,CAACE,KAAlC,GAA0C,EAA5D;AACA,QAAME,OAAO,GAAGnC,SAAS,EAAzB;AACA,sBACI,oBAAC,SAAD;AACI,IAAA,SAAS,EAAEmC,OAAO,CAACjC,IADvB;AAEI,IAAA,OAAO,EAAE0B,OAFb;AAGI,IAAA,KAAK,EAAEF;AAHX,KAIQI,KAJR;AAKI,IAAA,UAAU,EAAEE,SALhB;AAMI,IAAA,KAAK,EAAE,CAAC,CAACA,SANb;AAOI,IAAA,IAAI,EAAEL,IAPV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KADJ;AAWH,CAfD;;AAiBA,SAASS,SAAT,CAAmBP,KAAnB,EAA0B;AACtB,QAAMQ,MAAM,GAAG,CAACpB,IAAD,EAAOG,KAAP,EAAcE,KAAd,EAAqBD,OAArB,EAA8BG,GAA9B,KAAsC;AACjD,QAAIc,GAAG,GAAG,EAAV;;AACA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGV,KAAK,CAACW,IAAN,CAAWC,MAA/B,EAAuCF,CAAC,EAAxC,EAA4C;AACxCD,MAAAA,GAAG,CAACI,IAAJ,CAASb,KAAK,CAACW,IAAN,CAAWD,CAAX,EAAcI,GAAvB;AACH;;AACD,UAAMC,KAAK,GAAG;AACVC,MAAAA,QAAQ,EAAEP,GADA;AAEVrB,MAAAA,IAAI,EAAEA,IAFI;AAGV6B,MAAAA,KAAK,EAAEjB,KAAK,CAACiB,KAHH;AAIVxB,MAAAA,KAAK,EAAEA,KAJG;AAKVD,MAAAA,OAAO,EAAEA,OALC;AAMVG,MAAAA,GAAG,EAAEA,GANK;AAOVJ,MAAAA,KAAK,EAAEA;AAPG,KAAd;AASA2B,IAAAA,OAAO,CAACC,GAAR,CAAYJ,KAAZ;AACAf,IAAAA,KAAK,CAACrC,WAAN,CAAkBoD,KAAlB;AACH,GAhBD;;AAiBA,QAAMT,OAAO,GAAGnC,SAAS,EAAzB;AACA,sBACI;AAAK,IAAA,SAAS,EAAEmC,OAAO,CAAC1B,WAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,UAAD;AAAY,IAAA,OAAO,EAAC,IAApB;AAAyB,IAAA,KAAK,EAAE;AAAEwC,MAAAA,SAAS,EAAE,QAAb;AAAuBC,MAAAA,QAAQ,EAAE;AAAjC,KAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBADJ,eAII;AAAK,IAAA,KAAK,EAAE;AAAED,MAAAA,SAAS,EAAE,QAAb;AAAuB9C,MAAAA,YAAY,EAAE;AAArC,KAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,UAAD;AAAY,IAAA,OAAO,EAAC,GAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6DADJ,CAJJ,eASI,oBAAC,MAAD;AACI,IAAA,aAAa,EAAE;AAAEc,MAAAA,IAAI,EAAE,EAAR;AAAYG,MAAAA,KAAK,EAAE,EAAnB;AAAuBE,MAAAA,KAAK,EAAE,EAA9B;AAAkCD,MAAAA,OAAO,EAAE,EAA3C;AAA+CG,MAAAA,GAAG,EAAE;AAApD,KADnB;AAEI,IAAA,QAAQ,EAAE,CAAC2B,IAAD,EAAO;AAAEC,MAAAA;AAAF,KAAP,KAA6B;AACnCA,MAAAA,aAAa,CAAC,IAAD,CAAb,CADmC,CAEnC;;AACAf,MAAAA,MAAM,CAACc,IAAI,CAAClC,IAAN,EAAYkC,IAAI,CAAC/B,KAAjB,EAAwB+B,IAAI,CAAC7B,KAA7B,EAAoC6B,IAAI,CAAC9B,OAAzC,EAAkD8B,IAAI,CAAC3B,GAAvD,CAAN;AACA4B,MAAAA,aAAa,CAAC,KAAD,CAAb;AACH,KAPL;AAQI,IAAA,gBAAgB,EAAErC,gBARtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAUK,CAAC;AAAEsC,IAAAA,MAAF;AAAUC,IAAAA,MAAV;AAAkBC,IAAAA;AAAlB,GAAD,kBACG,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,WAAD;AAAa,IAAA,KAAK,EAAC,MAAnB;AAA0B,IAAA,OAAO,EAAC,UAAlC;AAA6C,IAAA,IAAI,EAAC,MAAlD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,CADJ,eAII;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,WAAD;AAAa,IAAA,KAAK,EAAC,OAAnB;AAA2B,IAAA,OAAO,EAAC,UAAnC;AAA8C,IAAA,IAAI,EAAC,OAAnD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,CAJJ,eAOI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,WAAD;AAAa,IAAA,KAAK,EAAC,OAAnB;AAA2B,IAAA,OAAO,EAAC,UAAnC;AAA8C,IAAA,IAAI,EAAC,OAAnD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,CAPJ,eAUI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,WAAD;AAAa,IAAA,KAAK,EAAC,SAAnB;AAA6B,IAAA,OAAO,EAAC,UAArC;AAAgD,IAAA,IAAI,EAAC,SAArD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,CAVJ,eAaI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,WAAD;AAAa,IAAA,KAAK,EAAC,KAAnB;AAAyB,IAAA,OAAO,EAAC,UAAjC;AAA4C,IAAA,IAAI,EAAC,KAAjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,CAbJ,eAgBI;AAAK,IAAA,KAAK,EAAE;AAAEN,MAAAA,SAAS,EAAE,QAAb;AAAuB7C,MAAAA,KAAK,EAAE,MAA9B;AAAsCD,MAAAA,YAAY,EAAE;AAApD,KAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,MAAD;AACI,IAAA,QAAQ,EAAEoD,YADd;AAEI,IAAA,KAAK,EAAE;AAAElD,MAAAA,KAAK,EAAE,OAAT;AAAkBK,MAAAA,eAAe,EAAE,OAAnC;AAA4CN,MAAAA,KAAK,EAAE;AAAnD,KAFX;AAGI,IAAA,IAAI,EAAC,QAHT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBADJ,CAhBJ,CAXR,CATJ,eAgDI,oBAAC,MAAD;AACI,IAAA,OAAO,EAAE,MAAMyB,KAAK,CAACpC,UAAN,EADnB;AAEI,IAAA,KAAK,EAAE;AAAEY,MAAAA,KAAK,EAAE,OAAT;AAAkBK,MAAAA,eAAe,EAAE,OAAnC;AAA4CN,MAAAA,KAAK,EAAE;AAAnD,KAFX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAII,oBAAC,eAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAJJ,YAhDJ,CADJ;AA0DH;;AAED,MAAMoD,eAAe,GAAIC,KAAD,IAAW;AAC/B,SAAO;AACHjB,IAAAA,IAAI,EAAEiB,KAAK,CAACC,MAAN,CAAalB,IADhB;AAEHM,IAAAA,KAAK,EAAEW,KAAK,CAACC,MAAN,CAAaZ;AAFjB,GAAP;AAIH,CALD;;AAOA,MAAMa,kBAAkB,GAAIC,QAAD,IAAc;AACrC,SAAO;AACHpE,IAAAA,WAAW,EAAGoD,KAAD,IAAWgB,QAAQ,CAACpE,WAAW,CAACoD,KAAD,CAAZ,CAD7B;AAEHnD,IAAAA,UAAU,EAAE,MAAMmE,QAAQ,CAACnE,UAAU,EAAX;AAFvB,GAAP;AAIH,CALD;;AAOA,eAAeF,OAAO,CAACiE,eAAD,EAAkBG,kBAAlB,CAAP,CAA6CvB,SAA7C,CAAf","sourcesContent":["import React from \"react\";\nimport { TextField, Button, Typography } from \"@material-ui/core\";\nimport { connect } from \"react-redux\";\nimport { submitOrder, submitForm } from \"../../store/actions/orderActions\";\nimport ChevronLeftIcon from \"@material-ui/icons/ChevronLeft\";\nimport * as yup from \"yup\";\nimport { Formik, Form, useField } from \"formik\";\nimport { makeStyles } from \"@material-ui/core/styles\";\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        marginBottom: \"1rem\",\n        width: \"100%\",\n        \"& label.Mui-focused\": {\n            color: \"grey\",\n        },\n        \"& .MuiInput-underline:after\": {\n            borderBottomColor: \"red\",\n        },\n        \"& .MuiOutlinedInput-root\": {\n            \"& fieldset\": {\n                borderColor: \"black\",\n                borderWidth: \"3px\",\n            },\n            \"&:hover fieldset\": {\n                borderColor: \"grey\",\n            },\n            \"&.Mui-focused fieldset\": {\n                borderColor: \"black\",\n            },\n        },\n    },\n    submitModel: {\n        backgroundColor: \"white\",\n        width: \"100%\",\n        padding: \"2rem\",\n        height: \"90%\",\n        borderTopLeftRadius: \"1rem\",\n        borderTopRightRadius: \"1rem\",\n    },\n}));\nconst validationSchema = yup.object({\n    name: yup.string().required(),\n    email: yup.string().email(\"Enter a valid Email :)\").required(),\n    address: yup.string().required(\"A valid address is required\"),\n    phone: yup.string().min(7, \"should atlest be 7 digits\").required(),\n    pin: yup.string().min(7, \"should atlest be 7 digits\").required(),\n});\n\nconst CustomField = ({ label, type, variant, ...props }) => {\n    const [field, meta] = useField(props);\n    const errorText = meta.error && meta.touched ? meta.error : \"\";\n    const classes = useStyles();\n    return (\n        <TextField\n            className={classes.root}\n            variant={variant}\n            label={label}\n            {...field}\n            helperText={errorText}\n            error={!!errorText}\n            type={type}\n        />\n    );\n};\n\nfunction OrderForm(props) {\n    const submit = (name, email, phone, address, pin) => {\n        let ids = [];\n        for (let i = 0; i < props.cart.length; i++) {\n            ids.push(props.cart[i]._id);\n        }\n        const order = {\n            products: ids,\n            name: name,\n            sizes: props.sizes,\n            phone: phone,\n            address: address,\n            pin: pin,\n            email: email,\n        };\n        console.log(order);\n        props.submitOrder(order);\n    };\n    const classes = useStyles();\n    return (\n        <div className={classes.submitModel}>\n            <Typography variant=\"h3\" style={{ textAlign: \"center\", fontSize: \"4rem\" }}>\n                Just some details\n            </Typography>\n            <div style={{ textAlign: \"center\", marginBottom: \"1.3rem\" }}>\n                <Typography variant=\"p\">\n                    Some details to deliver your Order at the right place\n                </Typography>\n            </div>\n            <Formik\n                initialValues={{ name: \"\", email: \"\", phone: \"\", address: \"\", pin: \"\" }}\n                onSubmit={(data, { setSubmitting }) => {\n                    setSubmitting(true);\n                    //! make async call here!!!!\n                    submit(data.name, data.email, data.phone, data.address, data.pin);\n                    setSubmitting(false);\n                }}\n                validationSchema={validationSchema}\n            >\n                {({ values, errors, isSubmitting }) => (\n                    <Form>\n                        <div>\n                            <CustomField label=\"Name\" variant=\"outlined\" name=\"name\" />\n                        </div>\n                        <div>\n                            <CustomField label=\"Email\" variant=\"outlined\" name=\"email\" />\n                        </div>\n                        <div>\n                            <CustomField label=\"Phone\" variant=\"outlined\" name=\"phone\" />\n                        </div>\n                        <div>\n                            <CustomField label=\"Address\" variant=\"outlined\" name=\"address\" />\n                        </div>\n                        <div>\n                            <CustomField label=\"Pin\" variant=\"outlined\" name=\"pin\" />\n                        </div>\n                        <div style={{ textAlign: \"center\", width: \"100%\", marginBottom: \"1rem\" }}>\n                            <Button\n                                disabled={isSubmitting}\n                                style={{ color: \"white\", backgroundColor: \"black\", width: \"100%\" }}\n                                type=\"submit\"\n                            >\n                                Place Order\n                            </Button>\n                        </div>\n                    </Form>\n                )}\n            </Formik>\n            <Button\n                onClick={() => props.submitForm()}\n                style={{ color: \"white\", backgroundColor: \"black\", width: \"100%\" }}\n            >\n                <ChevronLeftIcon />\n                Go back\n            </Button>\n        </div>\n    );\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        cart: state.orders.cart,\n        sizes: state.orders.sizes,\n    };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        submitOrder: (order) => dispatch(submitOrder(order)),\n        submitForm: () => dispatch(submitForm()),\n    };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(OrderForm);\n"]},"metadata":{},"sourceType":"module"}