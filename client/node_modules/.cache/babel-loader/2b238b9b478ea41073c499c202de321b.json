{"ast":null,"code":"var _ = require('lodash');\n\nvar logger = require('./logger').getInstance();\n\nvar ERRORS = require('./errors');\n\nmodule.exports = {\n  create: createPathRewriter\n};\n/**\n * Create rewrite function, to cache parsed rewrite rules.\n *\n * @param {Object} rewriteConfig\n * @return {Function} Function to rewrite paths; This function should accept `path` (request.url) as parameter\n */\n\nfunction createPathRewriter(rewriteConfig) {\n  var rulesCache;\n\n  if (!isValidRewriteConfig(rewriteConfig)) {\n    return;\n  }\n\n  if (_.isFunction(rewriteConfig)) {\n    var customRewriteFn = rewriteConfig;\n    return customRewriteFn;\n  } else {\n    rulesCache = parsePathRewriteRules(rewriteConfig);\n    return rewritePath;\n  }\n\n  function rewritePath(path) {\n    var result = path;\n\n    _.forEach(rulesCache, function (rule) {\n      if (rule.regex.test(path)) {\n        result = result.replace(rule.regex, rule.value);\n        logger.debug('[HPM] Rewriting path from \"%s\" to \"%s\"', path, result);\n        return false;\n      }\n    });\n\n    return result;\n  }\n}\n\nfunction isValidRewriteConfig(rewriteConfig) {\n  if (_.isFunction(rewriteConfig)) {\n    return true;\n  } else if (!_.isEmpty(rewriteConfig) && _.isPlainObject(rewriteConfig)) {\n    return true;\n  } else if (_.isUndefined(rewriteConfig) || _.isNull(rewriteConfig) || _.isEqual(rewriteConfig, {})) {\n    return false;\n  } else {\n    throw new Error(ERRORS.ERR_PATH_REWRITER_CONFIG);\n  }\n}\n\nfunction parsePathRewriteRules(rewriteConfig) {\n  var rules = [];\n\n  if (_.isPlainObject(rewriteConfig)) {\n    _.forIn(rewriteConfig, function (value, key) {\n      rules.push({\n        regex: new RegExp(key),\n        value: rewriteConfig[key]\n      });\n      logger.info('[HPM] Proxy rewrite rule created: \"%s\" ~> \"%s\"', key, rewriteConfig[key]);\n    });\n  }\n\n  return rules;\n}","map":{"version":3,"sources":["/Users/rachelmcgrath/Desktop/projects/product-shop/client/node_modules/http-proxy-middleware/lib/path-rewriter.js"],"names":["_","require","logger","getInstance","ERRORS","module","exports","create","createPathRewriter","rewriteConfig","rulesCache","isValidRewriteConfig","isFunction","customRewriteFn","parsePathRewriteRules","rewritePath","path","result","forEach","rule","regex","test","replace","value","debug","isEmpty","isPlainObject","isUndefined","isNull","isEqual","Error","ERR_PATH_REWRITER_CONFIG","rules","forIn","key","push","RegExp","info"],"mappings":"AAAA,IAAIA,CAAC,GAAGC,OAAO,CAAC,QAAD,CAAf;;AACA,IAAIC,MAAM,GAAGD,OAAO,CAAC,UAAD,CAAP,CAAoBE,WAApB,EAAb;;AACA,IAAIC,MAAM,GAAGH,OAAO,CAAC,UAAD,CAApB;;AAEAI,MAAM,CAACC,OAAP,GAAiB;AACfC,EAAAA,MAAM,EAAEC;AADO,CAAjB;AAIA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASA,kBAAT,CAA4BC,aAA5B,EAA2C;AACzC,MAAIC,UAAJ;;AAEA,MAAI,CAACC,oBAAoB,CAACF,aAAD,CAAzB,EAA0C;AACxC;AACD;;AAED,MAAIT,CAAC,CAACY,UAAF,CAAaH,aAAb,CAAJ,EAAiC;AAC/B,QAAII,eAAe,GAAGJ,aAAtB;AACA,WAAOI,eAAP;AACD,GAHD,MAGO;AACLH,IAAAA,UAAU,GAAGI,qBAAqB,CAACL,aAAD,CAAlC;AACA,WAAOM,WAAP;AACD;;AAED,WAASA,WAAT,CAAqBC,IAArB,EAA2B;AACzB,QAAIC,MAAM,GAAGD,IAAb;;AAEAhB,IAAAA,CAAC,CAACkB,OAAF,CAAUR,UAAV,EAAsB,UAASS,IAAT,EAAe;AACnC,UAAIA,IAAI,CAACC,KAAL,CAAWC,IAAX,CAAgBL,IAAhB,CAAJ,EAA2B;AACzBC,QAAAA,MAAM,GAAGA,MAAM,CAACK,OAAP,CAAeH,IAAI,CAACC,KAApB,EAA2BD,IAAI,CAACI,KAAhC,CAAT;AACArB,QAAAA,MAAM,CAACsB,KAAP,CAAa,wCAAb,EAAuDR,IAAvD,EAA6DC,MAA7D;AACA,eAAO,KAAP;AACD;AACF,KAND;;AAQA,WAAOA,MAAP;AACD;AACF;;AAED,SAASN,oBAAT,CAA8BF,aAA9B,EAA6C;AAC3C,MAAIT,CAAC,CAACY,UAAF,CAAaH,aAAb,CAAJ,EAAiC;AAC/B,WAAO,IAAP;AACD,GAFD,MAEO,IAAI,CAACT,CAAC,CAACyB,OAAF,CAAUhB,aAAV,CAAD,IAA6BT,CAAC,CAAC0B,aAAF,CAAgBjB,aAAhB,CAAjC,EAAiE;AACtE,WAAO,IAAP;AACD,GAFM,MAEA,IACLT,CAAC,CAAC2B,WAAF,CAAclB,aAAd,KACAT,CAAC,CAAC4B,MAAF,CAASnB,aAAT,CADA,IAEAT,CAAC,CAAC6B,OAAF,CAAUpB,aAAV,EAAyB,EAAzB,CAHK,EAIL;AACA,WAAO,KAAP;AACD,GANM,MAMA;AACL,UAAM,IAAIqB,KAAJ,CAAU1B,MAAM,CAAC2B,wBAAjB,CAAN;AACD;AACF;;AAED,SAASjB,qBAAT,CAA+BL,aAA/B,EAA8C;AAC5C,MAAIuB,KAAK,GAAG,EAAZ;;AAEA,MAAIhC,CAAC,CAAC0B,aAAF,CAAgBjB,aAAhB,CAAJ,EAAoC;AAClCT,IAAAA,CAAC,CAACiC,KAAF,CAAQxB,aAAR,EAAuB,UAASc,KAAT,EAAgBW,GAAhB,EAAqB;AAC1CF,MAAAA,KAAK,CAACG,IAAN,CAAW;AACTf,QAAAA,KAAK,EAAE,IAAIgB,MAAJ,CAAWF,GAAX,CADE;AAETX,QAAAA,KAAK,EAAEd,aAAa,CAACyB,GAAD;AAFX,OAAX;AAIAhC,MAAAA,MAAM,CAACmC,IAAP,CACE,gDADF,EAEEH,GAFF,EAGEzB,aAAa,CAACyB,GAAD,CAHf;AAKD,KAVD;AAWD;;AAED,SAAOF,KAAP;AACD","sourcesContent":["var _ = require('lodash')\nvar logger = require('./logger').getInstance()\nvar ERRORS = require('./errors')\n\nmodule.exports = {\n  create: createPathRewriter\n}\n\n/**\n * Create rewrite function, to cache parsed rewrite rules.\n *\n * @param {Object} rewriteConfig\n * @return {Function} Function to rewrite paths; This function should accept `path` (request.url) as parameter\n */\nfunction createPathRewriter(rewriteConfig) {\n  var rulesCache\n\n  if (!isValidRewriteConfig(rewriteConfig)) {\n    return\n  }\n\n  if (_.isFunction(rewriteConfig)) {\n    var customRewriteFn = rewriteConfig\n    return customRewriteFn\n  } else {\n    rulesCache = parsePathRewriteRules(rewriteConfig)\n    return rewritePath\n  }\n\n  function rewritePath(path) {\n    var result = path\n\n    _.forEach(rulesCache, function(rule) {\n      if (rule.regex.test(path)) {\n        result = result.replace(rule.regex, rule.value)\n        logger.debug('[HPM] Rewriting path from \"%s\" to \"%s\"', path, result)\n        return false\n      }\n    })\n\n    return result\n  }\n}\n\nfunction isValidRewriteConfig(rewriteConfig) {\n  if (_.isFunction(rewriteConfig)) {\n    return true\n  } else if (!_.isEmpty(rewriteConfig) && _.isPlainObject(rewriteConfig)) {\n    return true\n  } else if (\n    _.isUndefined(rewriteConfig) ||\n    _.isNull(rewriteConfig) ||\n    _.isEqual(rewriteConfig, {})\n  ) {\n    return false\n  } else {\n    throw new Error(ERRORS.ERR_PATH_REWRITER_CONFIG)\n  }\n}\n\nfunction parsePathRewriteRules(rewriteConfig) {\n  var rules = []\n\n  if (_.isPlainObject(rewriteConfig)) {\n    _.forIn(rewriteConfig, function(value, key) {\n      rules.push({\n        regex: new RegExp(key),\n        value: rewriteConfig[key]\n      })\n      logger.info(\n        '[HPM] Proxy rewrite rule created: \"%s\" ~> \"%s\"',\n        key,\n        rewriteConfig[key]\n      )\n    })\n  }\n\n  return rules\n}\n"]},"metadata":{},"sourceType":"script"}