{"ast":null,"code":"var _ = require('lodash');\n\nvar httpProxy = require('http-proxy');\n\nvar configFactory = require('./config-factory');\n\nvar handlers = require('./handlers');\n\nvar contextMatcher = require('./context-matcher');\n\nvar PathRewriter = require('./path-rewriter');\n\nvar Router = require('./router');\n\nvar logger = require('./logger').getInstance();\n\nvar getArrow = require('./logger').getArrow;\n\nmodule.exports = HttpProxyMiddleware;\n\nfunction HttpProxyMiddleware(context, opts) {\n  // https://github.com/chimurai/http-proxy-middleware/issues/57\n  var wsUpgradeDebounced = _.debounce(handleUpgrade);\n\n  var wsInitialized = false;\n  var config = configFactory.createConfig(context, opts);\n  var proxyOptions = config.options; // create proxy\n\n  var proxy = httpProxy.createProxyServer({});\n  logger.info('[HPM] Proxy created:', config.context, ' -> ', proxyOptions.target);\n  var pathRewriter = PathRewriter.create(proxyOptions.pathRewrite); // returns undefined when \"pathRewrite\" is not provided\n  // attach handler to http-proxy events\n\n  handlers.init(proxy, proxyOptions); // log errors for debug purpose\n\n  proxy.on('error', logError); // https://github.com/chimurai/http-proxy-middleware/issues/19\n  // expose function to upgrade externally\n\n  middleware.upgrade = wsUpgradeDebounced;\n  return middleware;\n\n  function middleware(req, res, next) {\n    if (shouldProxy(config.context, req)) {\n      var activeProxyOptions = prepareProxyRequest(req);\n      proxy.web(req, res, activeProxyOptions);\n    } else {\n      next();\n    }\n\n    if (proxyOptions.ws === true) {\n      // use initial request to access the server object to subscribe to http upgrade event\n      catchUpgradeRequest(req.connection.server);\n    }\n  }\n\n  function catchUpgradeRequest(server) {\n    // subscribe once; don't subscribe on every request...\n    // https://github.com/chimurai/http-proxy-middleware/issues/113\n    if (!wsInitialized) {\n      server.on('upgrade', wsUpgradeDebounced);\n      wsInitialized = true;\n    }\n  }\n\n  function handleUpgrade(req, socket, head) {\n    // set to initialized when used externally\n    wsInitialized = true;\n\n    if (shouldProxy(config.context, req)) {\n      var activeProxyOptions = prepareProxyRequest(req);\n      proxy.ws(req, socket, head, activeProxyOptions);\n      logger.info('[HPM] Upgrading to WebSocket');\n    }\n  }\n  /**\n   * Determine whether request should be proxied.\n   *\n   * @private\n   * @param  {String} context [description]\n   * @param  {Object} req     [description]\n   * @return {Boolean}\n   */\n\n\n  function shouldProxy(context, req) {\n    var path = req.originalUrl || req.url;\n    return contextMatcher.match(context, path, req);\n  }\n  /**\n   * Apply option.router and option.pathRewrite\n   * Order matters:\n   *    Router uses original path for routing;\n   *    NOT the modified path, after it has been rewritten by pathRewrite\n   * @param {Object} req\n   * @return {Object} proxy options\n   */\n\n\n  function prepareProxyRequest(req) {\n    // https://github.com/chimurai/http-proxy-middleware/issues/17\n    // https://github.com/chimurai/http-proxy-middleware/issues/94\n    req.url = req.originalUrl || req.url; // store uri before it gets rewritten for logging\n\n    var originalPath = req.url;\n\n    var newProxyOptions = _.assign({}, proxyOptions); // Apply in order:\n    // 1. option.router\n    // 2. option.pathRewrite\n\n\n    __applyRouter(req, newProxyOptions);\n\n    __applyPathRewrite(req, pathRewriter); // debug logging for both http(s) and websockets\n\n\n    if (proxyOptions.logLevel === 'debug') {\n      var arrow = getArrow(originalPath, req.url, proxyOptions.target, newProxyOptions.target);\n      logger.debug('[HPM] %s %s %s %s', req.method, originalPath, arrow, newProxyOptions.target);\n    }\n\n    return newProxyOptions;\n  } // Modify option.target when router present.\n\n\n  function __applyRouter(req, options) {\n    var newTarget;\n\n    if (options.router) {\n      newTarget = Router.getTarget(req, options);\n\n      if (newTarget) {\n        logger.debug('[HPM] Router new target: %s -> \"%s\"', options.target, newTarget);\n        options.target = newTarget;\n      }\n    }\n  } // rewrite path\n\n\n  function __applyPathRewrite(req, pathRewriter) {\n    if (pathRewriter) {\n      var path = pathRewriter(req.url, req);\n\n      if (typeof path === 'string') {\n        req.url = path;\n      } else {\n        logger.info('[HPM] pathRewrite: No rewritten path found. (%s)', req.url);\n      }\n    }\n  }\n\n  function logError(err, req, res) {\n    var hostname = req.headers && req.headers.host || req.hostname || req.host; // (websocket) || (node0.10 || node 4/5)\n\n    var target = proxyOptions.target.host || proxyOptions.target;\n    var errorMessage = '[HPM] Error occurred while trying to proxy request %s from %s to %s (%s) (%s)';\n    var errReference = 'https://nodejs.org/api/errors.html#errors_common_system_errors'; // link to Node Common Systems Errors page\n\n    logger.error(errorMessage, req.url, hostname, target, err.code || err, errReference);\n  }\n}","map":{"version":3,"sources":["/Users/rachelmcgrath/Desktop/projects/product-shop/client/node_modules/http-proxy-middleware/lib/index.js"],"names":["_","require","httpProxy","configFactory","handlers","contextMatcher","PathRewriter","Router","logger","getInstance","getArrow","module","exports","HttpProxyMiddleware","context","opts","wsUpgradeDebounced","debounce","handleUpgrade","wsInitialized","config","createConfig","proxyOptions","options","proxy","createProxyServer","info","target","pathRewriter","create","pathRewrite","init","on","logError","middleware","upgrade","req","res","next","shouldProxy","activeProxyOptions","prepareProxyRequest","web","ws","catchUpgradeRequest","connection","server","socket","head","path","originalUrl","url","match","originalPath","newProxyOptions","assign","__applyRouter","__applyPathRewrite","logLevel","arrow","debug","method","newTarget","router","getTarget","err","hostname","headers","host","errorMessage","errReference","error","code"],"mappings":"AAAA,IAAIA,CAAC,GAAGC,OAAO,CAAC,QAAD,CAAf;;AACA,IAAIC,SAAS,GAAGD,OAAO,CAAC,YAAD,CAAvB;;AACA,IAAIE,aAAa,GAAGF,OAAO,CAAC,kBAAD,CAA3B;;AACA,IAAIG,QAAQ,GAAGH,OAAO,CAAC,YAAD,CAAtB;;AACA,IAAII,cAAc,GAAGJ,OAAO,CAAC,mBAAD,CAA5B;;AACA,IAAIK,YAAY,GAAGL,OAAO,CAAC,iBAAD,CAA1B;;AACA,IAAIM,MAAM,GAAGN,OAAO,CAAC,UAAD,CAApB;;AACA,IAAIO,MAAM,GAAGP,OAAO,CAAC,UAAD,CAAP,CAAoBQ,WAApB,EAAb;;AACA,IAAIC,QAAQ,GAAGT,OAAO,CAAC,UAAD,CAAP,CAAoBS,QAAnC;;AAEAC,MAAM,CAACC,OAAP,GAAiBC,mBAAjB;;AAEA,SAASA,mBAAT,CAA6BC,OAA7B,EAAsCC,IAAtC,EAA4C;AAC1C;AACA,MAAIC,kBAAkB,GAAGhB,CAAC,CAACiB,QAAF,CAAWC,aAAX,CAAzB;;AACA,MAAIC,aAAa,GAAG,KAApB;AACA,MAAIC,MAAM,GAAGjB,aAAa,CAACkB,YAAd,CAA2BP,OAA3B,EAAoCC,IAApC,CAAb;AACA,MAAIO,YAAY,GAAGF,MAAM,CAACG,OAA1B,CAL0C,CAO1C;;AACA,MAAIC,KAAK,GAAGtB,SAAS,CAACuB,iBAAV,CAA4B,EAA5B,CAAZ;AACAjB,EAAAA,MAAM,CAACkB,IAAP,CACE,sBADF,EAEEN,MAAM,CAACN,OAFT,EAGE,MAHF,EAIEQ,YAAY,CAACK,MAJf;AAOA,MAAIC,YAAY,GAAGtB,YAAY,CAACuB,MAAb,CAAoBP,YAAY,CAACQ,WAAjC,CAAnB,CAhB0C,CAgBuB;AAEjE;;AACA1B,EAAAA,QAAQ,CAAC2B,IAAT,CAAcP,KAAd,EAAqBF,YAArB,EAnB0C,CAqB1C;;AACAE,EAAAA,KAAK,CAACQ,EAAN,CAAS,OAAT,EAAkBC,QAAlB,EAtB0C,CAwB1C;AACA;;AACAC,EAAAA,UAAU,CAACC,OAAX,GAAqBnB,kBAArB;AAEA,SAAOkB,UAAP;;AAEA,WAASA,UAAT,CAAoBE,GAApB,EAAyBC,GAAzB,EAA8BC,IAA9B,EAAoC;AAClC,QAAIC,WAAW,CAACnB,MAAM,CAACN,OAAR,EAAiBsB,GAAjB,CAAf,EAAsC;AACpC,UAAII,kBAAkB,GAAGC,mBAAmB,CAACL,GAAD,CAA5C;AACAZ,MAAAA,KAAK,CAACkB,GAAN,CAAUN,GAAV,EAAeC,GAAf,EAAoBG,kBAApB;AACD,KAHD,MAGO;AACLF,MAAAA,IAAI;AACL;;AAED,QAAIhB,YAAY,CAACqB,EAAb,KAAoB,IAAxB,EAA8B;AAC5B;AACAC,MAAAA,mBAAmB,CAACR,GAAG,CAACS,UAAJ,CAAeC,MAAhB,CAAnB;AACD;AACF;;AAED,WAASF,mBAAT,CAA6BE,MAA7B,EAAqC;AACnC;AACA;AACA,QAAI,CAAC3B,aAAL,EAAoB;AAClB2B,MAAAA,MAAM,CAACd,EAAP,CAAU,SAAV,EAAqBhB,kBAArB;AACAG,MAAAA,aAAa,GAAG,IAAhB;AACD;AACF;;AAED,WAASD,aAAT,CAAuBkB,GAAvB,EAA4BW,MAA5B,EAAoCC,IAApC,EAA0C;AACxC;AACA7B,IAAAA,aAAa,GAAG,IAAhB;;AAEA,QAAIoB,WAAW,CAACnB,MAAM,CAACN,OAAR,EAAiBsB,GAAjB,CAAf,EAAsC;AACpC,UAAII,kBAAkB,GAAGC,mBAAmB,CAACL,GAAD,CAA5C;AACAZ,MAAAA,KAAK,CAACmB,EAAN,CAASP,GAAT,EAAcW,MAAd,EAAsBC,IAAtB,EAA4BR,kBAA5B;AACAhC,MAAAA,MAAM,CAACkB,IAAP,CAAY,8BAAZ;AACD;AACF;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;;AACE,WAASa,WAAT,CAAqBzB,OAArB,EAA8BsB,GAA9B,EAAmC;AACjC,QAAIa,IAAI,GAAGb,GAAG,CAACc,WAAJ,IAAmBd,GAAG,CAACe,GAAlC;AACA,WAAO9C,cAAc,CAAC+C,KAAf,CAAqBtC,OAArB,EAA8BmC,IAA9B,EAAoCb,GAApC,CAAP;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;;AACE,WAASK,mBAAT,CAA6BL,GAA7B,EAAkC;AAChC;AACA;AACAA,IAAAA,GAAG,CAACe,GAAJ,GAAUf,GAAG,CAACc,WAAJ,IAAmBd,GAAG,CAACe,GAAjC,CAHgC,CAKhC;;AACA,QAAIE,YAAY,GAAGjB,GAAG,CAACe,GAAvB;;AACA,QAAIG,eAAe,GAAGtD,CAAC,CAACuD,MAAF,CAAS,EAAT,EAAajC,YAAb,CAAtB,CAPgC,CAShC;AACA;AACA;;;AACAkC,IAAAA,aAAa,CAACpB,GAAD,EAAMkB,eAAN,CAAb;;AACAG,IAAAA,kBAAkB,CAACrB,GAAD,EAAMR,YAAN,CAAlB,CAbgC,CAehC;;;AACA,QAAIN,YAAY,CAACoC,QAAb,KAA0B,OAA9B,EAAuC;AACrC,UAAIC,KAAK,GAAGjD,QAAQ,CAClB2C,YADkB,EAElBjB,GAAG,CAACe,GAFc,EAGlB7B,YAAY,CAACK,MAHK,EAIlB2B,eAAe,CAAC3B,MAJE,CAApB;AAMAnB,MAAAA,MAAM,CAACoD,KAAP,CACE,mBADF,EAEExB,GAAG,CAACyB,MAFN,EAGER,YAHF,EAIEM,KAJF,EAKEL,eAAe,CAAC3B,MALlB;AAOD;;AAED,WAAO2B,eAAP;AACD,GAtHyC,CAwH1C;;;AACA,WAASE,aAAT,CAAuBpB,GAAvB,EAA4Bb,OAA5B,EAAqC;AACnC,QAAIuC,SAAJ;;AAEA,QAAIvC,OAAO,CAACwC,MAAZ,EAAoB;AAClBD,MAAAA,SAAS,GAAGvD,MAAM,CAACyD,SAAP,CAAiB5B,GAAjB,EAAsBb,OAAtB,CAAZ;;AAEA,UAAIuC,SAAJ,EAAe;AACbtD,QAAAA,MAAM,CAACoD,KAAP,CACE,qCADF,EAEErC,OAAO,CAACI,MAFV,EAGEmC,SAHF;AAKAvC,QAAAA,OAAO,CAACI,MAAR,GAAiBmC,SAAjB;AACD;AACF;AACF,GAxIyC,CA0I1C;;;AACA,WAASL,kBAAT,CAA4BrB,GAA5B,EAAiCR,YAAjC,EAA+C;AAC7C,QAAIA,YAAJ,EAAkB;AAChB,UAAIqB,IAAI,GAAGrB,YAAY,CAACQ,GAAG,CAACe,GAAL,EAAUf,GAAV,CAAvB;;AAEA,UAAI,OAAOa,IAAP,KAAgB,QAApB,EAA8B;AAC5Bb,QAAAA,GAAG,CAACe,GAAJ,GAAUF,IAAV;AACD,OAFD,MAEO;AACLzC,QAAAA,MAAM,CAACkB,IAAP,CAAY,kDAAZ,EAAgEU,GAAG,CAACe,GAApE;AACD;AACF;AACF;;AAED,WAASlB,QAAT,CAAkBgC,GAAlB,EAAuB7B,GAAvB,EAA4BC,GAA5B,EAAiC;AAC/B,QAAI6B,QAAQ,GACT9B,GAAG,CAAC+B,OAAJ,IAAe/B,GAAG,CAAC+B,OAAJ,CAAYC,IAA5B,IAAsChC,GAAG,CAAC8B,QAAJ,IAAgB9B,GAAG,CAACgC,IAD5D,CAD+B,CAEmC;;AAClE,QAAIzC,MAAM,GAAGL,YAAY,CAACK,MAAb,CAAoByC,IAApB,IAA4B9C,YAAY,CAACK,MAAtD;AACA,QAAI0C,YAAY,GACd,+EADF;AAEA,QAAIC,YAAY,GACd,gEADF,CAN+B,CAOoC;;AAEnE9D,IAAAA,MAAM,CAAC+D,KAAP,CACEF,YADF,EAEEjC,GAAG,CAACe,GAFN,EAGEe,QAHF,EAIEvC,MAJF,EAKEsC,GAAG,CAACO,IAAJ,IAAYP,GALd,EAMEK,YANF;AAQD;AACF","sourcesContent":["var _ = require('lodash')\nvar httpProxy = require('http-proxy')\nvar configFactory = require('./config-factory')\nvar handlers = require('./handlers')\nvar contextMatcher = require('./context-matcher')\nvar PathRewriter = require('./path-rewriter')\nvar Router = require('./router')\nvar logger = require('./logger').getInstance()\nvar getArrow = require('./logger').getArrow\n\nmodule.exports = HttpProxyMiddleware\n\nfunction HttpProxyMiddleware(context, opts) {\n  // https://github.com/chimurai/http-proxy-middleware/issues/57\n  var wsUpgradeDebounced = _.debounce(handleUpgrade)\n  var wsInitialized = false\n  var config = configFactory.createConfig(context, opts)\n  var proxyOptions = config.options\n\n  // create proxy\n  var proxy = httpProxy.createProxyServer({})\n  logger.info(\n    '[HPM] Proxy created:',\n    config.context,\n    ' -> ',\n    proxyOptions.target\n  )\n\n  var pathRewriter = PathRewriter.create(proxyOptions.pathRewrite) // returns undefined when \"pathRewrite\" is not provided\n\n  // attach handler to http-proxy events\n  handlers.init(proxy, proxyOptions)\n\n  // log errors for debug purpose\n  proxy.on('error', logError)\n\n  // https://github.com/chimurai/http-proxy-middleware/issues/19\n  // expose function to upgrade externally\n  middleware.upgrade = wsUpgradeDebounced\n\n  return middleware\n\n  function middleware(req, res, next) {\n    if (shouldProxy(config.context, req)) {\n      var activeProxyOptions = prepareProxyRequest(req)\n      proxy.web(req, res, activeProxyOptions)\n    } else {\n      next()\n    }\n\n    if (proxyOptions.ws === true) {\n      // use initial request to access the server object to subscribe to http upgrade event\n      catchUpgradeRequest(req.connection.server)\n    }\n  }\n\n  function catchUpgradeRequest(server) {\n    // subscribe once; don't subscribe on every request...\n    // https://github.com/chimurai/http-proxy-middleware/issues/113\n    if (!wsInitialized) {\n      server.on('upgrade', wsUpgradeDebounced)\n      wsInitialized = true\n    }\n  }\n\n  function handleUpgrade(req, socket, head) {\n    // set to initialized when used externally\n    wsInitialized = true\n\n    if (shouldProxy(config.context, req)) {\n      var activeProxyOptions = prepareProxyRequest(req)\n      proxy.ws(req, socket, head, activeProxyOptions)\n      logger.info('[HPM] Upgrading to WebSocket')\n    }\n  }\n\n  /**\n   * Determine whether request should be proxied.\n   *\n   * @private\n   * @param  {String} context [description]\n   * @param  {Object} req     [description]\n   * @return {Boolean}\n   */\n  function shouldProxy(context, req) {\n    var path = req.originalUrl || req.url\n    return contextMatcher.match(context, path, req)\n  }\n\n  /**\n   * Apply option.router and option.pathRewrite\n   * Order matters:\n   *    Router uses original path for routing;\n   *    NOT the modified path, after it has been rewritten by pathRewrite\n   * @param {Object} req\n   * @return {Object} proxy options\n   */\n  function prepareProxyRequest(req) {\n    // https://github.com/chimurai/http-proxy-middleware/issues/17\n    // https://github.com/chimurai/http-proxy-middleware/issues/94\n    req.url = req.originalUrl || req.url\n\n    // store uri before it gets rewritten for logging\n    var originalPath = req.url\n    var newProxyOptions = _.assign({}, proxyOptions)\n\n    // Apply in order:\n    // 1. option.router\n    // 2. option.pathRewrite\n    __applyRouter(req, newProxyOptions)\n    __applyPathRewrite(req, pathRewriter)\n\n    // debug logging for both http(s) and websockets\n    if (proxyOptions.logLevel === 'debug') {\n      var arrow = getArrow(\n        originalPath,\n        req.url,\n        proxyOptions.target,\n        newProxyOptions.target\n      )\n      logger.debug(\n        '[HPM] %s %s %s %s',\n        req.method,\n        originalPath,\n        arrow,\n        newProxyOptions.target\n      )\n    }\n\n    return newProxyOptions\n  }\n\n  // Modify option.target when router present.\n  function __applyRouter(req, options) {\n    var newTarget\n\n    if (options.router) {\n      newTarget = Router.getTarget(req, options)\n\n      if (newTarget) {\n        logger.debug(\n          '[HPM] Router new target: %s -> \"%s\"',\n          options.target,\n          newTarget\n        )\n        options.target = newTarget\n      }\n    }\n  }\n\n  // rewrite path\n  function __applyPathRewrite(req, pathRewriter) {\n    if (pathRewriter) {\n      var path = pathRewriter(req.url, req)\n\n      if (typeof path === 'string') {\n        req.url = path\n      } else {\n        logger.info('[HPM] pathRewrite: No rewritten path found. (%s)', req.url)\n      }\n    }\n  }\n\n  function logError(err, req, res) {\n    var hostname =\n      (req.headers && req.headers.host) || (req.hostname || req.host) // (websocket) || (node0.10 || node 4/5)\n    var target = proxyOptions.target.host || proxyOptions.target\n    var errorMessage =\n      '[HPM] Error occurred while trying to proxy request %s from %s to %s (%s) (%s)'\n    var errReference =\n      'https://nodejs.org/api/errors.html#errors_common_system_errors' // link to Node Common Systems Errors page\n\n    logger.error(\n      errorMessage,\n      req.url,\n      hostname,\n      target,\n      err.code || err,\n      errReference\n    )\n  }\n}\n"]},"metadata":{},"sourceType":"script"}